import time
import socket
import os
import logging
import asyncio
import datetime
import pytz
from telegram.ext import ApplicationBuilder
from config_veretevo.env import TELEGRAM_TOKEN
from config_veretevo.constants import VERSION
from handlers_veretevo.menu import register_menu_handlers
from handlers_veretevo.tasks import register_task_handlers
from handlers_veretevo.reports import register_report_handlers, send_morning_report, send_evening_report
from handlers_veretevo.gpt_handlers import register_gpt_handlers
from handlers_veretevo.voice_handler import register_voice_handlers
from handlers_veretevo.contacts import register_contacts_handlers
from services_veretevo.department_service import load_departments, DEPARTMENTS
import requests
from config_veretevo.constants import GENERAL_DIRECTOR_ID
import threading
from utils_veretevo.todoist_sync_polling import sync_todoist_to_bot
from utils_veretevo.group_monitor import GroupMonitor
import json

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
os.environ['TZ'] = 'Europe/Moscow'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
LOGS_DIR = "logs"
TASKS_FILE = "data/tasks.json"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
_notify_start_called = False

def notify_start():
    global _notify_start_called
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if _notify_start_called:
        print(f"[WARN] notify_start() —É–∂–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        logging.info(f"[WARN] notify_start() —É–∂–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        call_time = time.time()
        hostname = socket.gethostname()
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        msg = f"Veretevo Bot v{VERSION} –±—ã–ª –∑–∞–ø—É—â–µ–Ω/–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!\n\nüÜî ID: {call_time}\nüñ•Ô∏è Host: {hostname}\n‚è∞ Time: {timestamp}"
        print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –≤ {GENERAL_DIRECTOR_ID}")
        logging.info(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –≤ {GENERAL_DIRECTOR_ID}")
        response = requests.post(url, data={"chat_id": GENERAL_DIRECTOR_ID, "text": msg}, timeout=5)
        print(f"[INFO] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        logging.info(f"[INFO] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        _notify_start_called = True
        
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {e}")
        logging.info(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {e}")
        # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ—à–∏–±–æ–∫

def periodic_todoist_sync(application=None):
    try:
        with open(TASKS_FILE, 'r', encoding='utf-8') as f:
            tasks = json.load(f)
    except Exception:
        tasks = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    def sync_worker():
        try:
            sync_todoist_to_bot(tasks, GENERAL_DIRECTOR_ID, application)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            with open(TASKS_FILE, 'w', encoding='utf-8') as f:
                json.dump(tasks, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"[WARN] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Todoist: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
    sync_thread = threading.Thread(target=sync_worker, daemon=True)
    sync_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    threading.Timer(300, lambda: periodic_todoist_sync(application)).start()

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    os.makedirs(LOGS_DIR, exist_ok=True)
    log_formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    file_handler = logging.FileHandler(f"{LOGS_DIR}/bot.log", encoding="utf-8")
    file_handler.setFormatter(log_formatter)
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(log_formatter)
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    root_logger.handlers = []  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    root_logger.addHandler(file_handler)
    root_logger.addHandler(stream_handler)

def run_async_report(report_func):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        if application and application.bot:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.create_task –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º event loop
            import asyncio
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop
                loop = asyncio.get_running_loop()
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–µ–º loop
                task = loop.create_task(report_func(application.bot))
                logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç—á–µ—Ç–∞ {report_func.__name__} —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º event loop")
            except RuntimeError:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(report_func(application.bot))
                loop.close()
                logging.info(f"‚úÖ –û—Ç—á–µ—Ç {report_func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –Ω–æ–≤–æ–º event loop")
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç {report_func.__name__}: application.bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ {report_func.__name__}: {e}", exc_info=True)

def setup_report_scheduler(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ job_queue –¥–æ—Å—Ç—É–ø–µ–Ω
        if not application or not application.job_queue:
            logging.error("‚ùå JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤")
            print("‚ùå JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        moscow_tz = pytz.timezone('Europe/Moscow')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ UTC
        # 7:30 –ú–°–ö = 4:30 UTC (–∑–∏–º–æ–π) –∏–ª–∏ 4:30 UTC (–ª–µ—Ç–æ–º)
        # 18:00 –ú–°–ö = 15:00 UTC (–∑–∏–º–æ–π) –∏–ª–∏ 15:00 UTC (–ª–µ—Ç–æ–º)
        
        # –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á–µ—Ç –≤ 7:30 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (4:30 UTC)
        morning_time_utc = datetime.time(hour=4, minute=30)
        
        application.job_queue.run_daily(
            lambda context: run_async_report(send_morning_report), 
            time=morning_time_utc,
            days=(0, 1, 2, 3, 4, 5, 6)  # –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        )
        
        # –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç –≤ 18:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (15:00 UTC)
        evening_time_utc = datetime.time(hour=15, minute=0)
        
        application.job_queue.run_daily(
            lambda context: run_async_report(send_evening_report), 
            time=evening_time_utc,
            days=(0, 1, 2, 3, 4, 5, 6)  # –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        )
        
        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: —É—Ç—Ä–µ–Ω–Ω–∏–π –≤ 7:30 MSK (4:30 UTC), –≤–µ—á–µ—Ä–Ω–∏–π –≤ 18:00 MSK (15:00 UTC)")
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: —É—Ç—Ä–µ–Ω–Ω–∏–π –≤ 7:30 MSK (4:30 UTC), –≤–µ—á–µ—Ä–Ω–∏–π –≤ 18:00 MSK (15:00 UTC)")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")

def main():
    global application
    
    print("=== Veretevo Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è ===")
    print(f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {VERSION}")
    
    # –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logging.info("=== Veretevo Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω) ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–¥–µ–ª—ã –≤ —Ñ–æ–Ω–µ
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª–æ–≤...")
    load_departments()
    
    # –°–æ–∑–¥–∞–µ–º application —Å job_queue
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
    if not TELEGRAM_TOKEN:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler
    async def error_handler(update, context):
        logging.error(f"[ERROR] Exception: {context.error}", exc_info=context.error)
        if update and hasattr(update, 'message') and update.message:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    application.add_error_handler(error_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    register_gpt_handlers(application)  # GPT-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–≤—ã–º–∏
    register_menu_handlers(application)
    register_task_handlers(application)
    register_report_handlers(application)
    register_voice_handlers(application)  # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    register_contacts_handlers(application)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤...")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    def setup_scheduler_with_retry():
        import time
        max_attempts = 5
        for attempt in range(max_attempts):
            try:
                setup_report_scheduler(application)
                break
            except Exception as e:
                if attempt < max_attempts - 1:
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                    time.sleep(2)
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    scheduler_thread = threading.Thread(target=setup_scheduler_with_retry, daemon=True)
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø
    print("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    enable_notifications = os.getenv("ENABLE_GROUP_NOTIFICATIONS", "true").lower() == "true"
    group_monitor = GroupMonitor(enable_notifications=enable_notifications)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def start_monitoring():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(group_monitor.start_monitoring(application))
    
    monitor_thread = threading.Thread(target=start_monitoring, daemon=True)
    monitor_thread.start()
    
    if enable_notifications:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã")
    else:
        print("üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ...")
    notify_start()
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Todoist (–≤ —Ñ–æ–Ω–µ)
    print("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    periodic_todoist_sync(application)

    print("=== Veretevo Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ===")
    application.run_polling()

if __name__ == "__main__":
    main()
