import json
import logging
import os
from typing import List, Dict, Optional
from datetime import datetime, timedelta
import asyncio
from telegram import Bot
from config_veretevo.constants import GENERAL_DIRECTOR_ID

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, bot: Bot, data_dir: str = "data"):
        self.bot = bot
        self.data_dir = data_dir
        self.users_file = os.path.join(data_dir, "active_users.json")
        self.notifications_file = os.path.join(data_dir, "notifications.json")
        self._load_data()
    
    def _load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            with open(self.users_file, 'r', encoding='utf-8') as f:
                self.active_users = json.load(f)
        except FileNotFoundError:
            self.active_users = {"users": {}, "last_updated": datetime.now().isoformat()}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        try:
            with open(self.notifications_file, 'r', encoding='utf-8') as f:
                self.notifications = json.load(f)
        except FileNotFoundError:
            self.notifications = {"notifications": [], "last_id": 0}
    
    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö"""
        os.makedirs(self.data_dir, exist_ok=True)
        
        with open(self.users_file, 'w', encoding='utf-8') as f:
            json.dump(self.active_users, f, ensure_ascii=False, indent=2)
        
        with open(self.notifications_file, 'w', encoding='utf-8') as f:
            json.dump(self.notifications, f, ensure_ascii=False, indent=2)
    
    def register_user(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        current_time = datetime.now().isoformat()
        
        if user_id_str not in self.active_users["users"]:
            self.active_users["users"][user_id_str] = {
                "user_id": user_id,
                "username": username,
                "first_name": first_name,
                "last_name": last_name,
                "registered_at": current_time,
                "last_activity": current_time,
                "notifications_enabled": True
            }
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            self.active_users["users"][user_id_str]["last_activity"] = current_time
            if username:
                self.active_users["users"][user_id_str]["username"] = username
            if first_name:
                self.active_users["users"][user_id_str]["first_name"] = first_name
            if last_name:
                self.active_users["users"][user_id_str]["last_name"] = last_name
        
        self.active_users["last_updated"] = current_time
        self._save_data()
        logging.info(f"[NOTIFICATION] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    
    def create_notification(self, title: str, message: str, notification_type: str = "update", 
                          requires_action: bool = False, action_text: str = None) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        notification_id = self.notifications["last_id"] + 1
        self.notifications["last_id"] = notification_id
        
        notification = {
            "id": notification_id,
            "title": title,
            "message": message,
            "type": notification_type,
            "requires_action": requires_action,
            "action_text": action_text,
            "created_at": datetime.now().isoformat(),
            "sent_to": []
        }
        
        self.notifications["notifications"].append(notification)
        self._save_data()
        
        logging.info(f"[NOTIFICATION] –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification_id}: {title}")
        return notification_id
    
    async def send_notification_to_all(self, notification_id: int, exclude_users: List[int] = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if exclude_users is None:
            exclude_users = []
        
        notification = None
        for n in self.notifications["notifications"]:
            if n["id"] == notification_id:
                notification = n
                break
        
        if not notification:
            logging.error(f"[NOTIFICATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        exclude_users_str = [str(uid) for uid in exclude_users]
        success_count = 0
        error_count = 0
        
        for user_id_str, user_data in self.active_users["users"].items():
            if user_id_str in exclude_users_str:
                continue
            
            if not user_data.get("notifications_enabled", True):
                continue
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = f"üîî <b>{notification['title']}</b>\n\n{notification['message']}"
                
                if notification["requires_action"] and notification["action_text"]:
                    text += f"\n\n{notification['action_text']}"
                
                await self.bot.send_message(
                    chat_id=user_data["user_id"],
                    text=text,
                    parse_mode="HTML"
                )
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                if user_data["user_id"] not in notification["sent_to"]:
                    notification["sent_to"].append(user_data["user_id"])
                
                success_count += 1
                logging.debug(f"[NOTIFICATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['user_id']}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                error_count += 1
                logging.error(f"[NOTIFICATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{notification_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['user_id']}: {e}")
        
        self._save_data()
        logging.info(f"[NOTIFICATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {error_count}")
    
    async def send_update_notification(self, update_title: str, update_description: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞"""
        notification_id = self.create_notification(
            title=update_title,
            message=update_description,
            notification_type="update",
            requires_action=True,
            action_text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é"
        )
        
        await self.send_notification_to_all(notification_id)
        return notification_id
    
    def get_active_users_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return len(self.active_users["users"])
    
    def get_recent_users(self, days: int = 7) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        cutoff_date = datetime.now() - timedelta(days=days)
        recent_users = []
        
        for user_data in self.active_users["users"].values():
            last_activity = datetime.fromisoformat(user_data["last_activity"])
            if last_activity > cutoff_date:
                recent_users.append(user_data)
        
        return recent_users
    
    def cleanup_inactive_users(self, days: int = 30):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        cutoff_date = datetime.now() - timedelta(days=days)
        users_to_remove = []
        
        for user_id_str, user_data in self.active_users["users"].items():
            last_activity = datetime.fromisoformat(user_data["last_activity"])
            if last_activity < cutoff_date:
                users_to_remove.append(user_id_str)
        
        for user_id_str in users_to_remove:
            del self.active_users["users"][user_id_str]
        
        if users_to_remove:
            self._save_data()
            logging.info(f"[NOTIFICATION] –£–¥–∞–ª–µ–Ω–æ {len(users_to_remove)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        return len(users_to_remove) 