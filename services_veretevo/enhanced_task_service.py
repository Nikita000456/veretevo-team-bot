"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏.
–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —Ç–µ–≥–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
"""
import json
import logging
import re
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum

class Priority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    URGENT = "urgent"

class TaskCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á"""
    DEVELOPMENT = "development"
    DESIGN = "design"
    MARKETING = "marketing"
    ADMINISTRATION = "administration"
    SUPPORT = "support"
    PLANNING = "planning"
    OTHER = "other"

@dataclass
class TaskTag:
    """–¢–µ–≥ –∑–∞–¥–∞—á–∏"""
    name: str
    color: str = "#007bff"  # –°–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@dataclass
class TaskReminder:
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ"""
    task_id: int
    reminder_time: datetime
    message: str
    is_sent: bool = False

class EnhancedTaskService:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏"""
    
    def __init__(self):
        self.priority_keywords = {
            Priority.URGENT: ["—Å—Ä–æ—á–Ω–æ", "urgent", "–∫—Ä–∏—Ç–∏—á–Ω–æ", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "asap", "üî•", "‚ö°"],
            Priority.HIGH: ["–≤–∞–∂–Ω–æ", "important", "–≤—ã—Å–æ–∫–∏–π", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "‚ùó", "‚ö†Ô∏è"],
            Priority.MEDIUM: ["–æ–±—ã—á–Ω–æ", "normal", "—Å—Ä–µ–¥–Ω–∏–π", "üìã"],
            Priority.LOW: ["–Ω–µ–≤–∞–∂–Ω–æ", "low", "–Ω–∏–∑–∫–∏–π", "üìù"]
        }
        
        self.category_keywords = {
            TaskCategory.DEVELOPMENT: ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "bug", "feature", "dev", "üíª"],
            TaskCategory.DESIGN: ["–¥–∏–∑–∞–π–Ω", "design", "ui", "ux", "–º–∞–∫–µ—Ç", "üé®"],
            TaskCategory.MARKETING: ["–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "marketing", "—Ä–µ–∫–ª–∞–º–∞", "–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", "üì¢"],
            TaskCategory.ADMINISTRATION: ["–∞–¥–º–∏–Ω", "admin", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "‚öôÔ∏è"],
            TaskCategory.SUPPORT: ["–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "support", "–ø–æ–º–æ—â—å", "help", "üÜò"],
            TaskCategory.PLANNING: ["–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "planning", "–ø–ª–∞–Ω—ã", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "üìÖ"],
        }
        
        self.reminders: List[TaskReminder] = []
        self.tags: Dict[str, TaskTag] = {}
    
    def detect_priority(self, text: str) -> Priority:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞"""
        text_lower = text.lower()
        
        for priority, keywords in self.priority_keywords.items():
            for keyword in keywords:
                if keyword.lower() in text_lower:
                    return priority
        
        return Priority.MEDIUM  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    
    def detect_category(self, text: str) -> TaskCategory:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏"""
        text_lower = text.lower()
        
        for category, keywords in self.category_keywords.items():
            for keyword in keywords:
                if keyword.lower() in text_lower:
                    return category
        
        return TaskCategory.OTHER
    
    def extract_tags(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ (—Å–ª–æ–≤–∞ —Å #)"""
        tags = re.findall(r'#(\w+)', text)
        return list(set(tags))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def create_enhanced_task(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        text = task_data.get('text', '')
        
        enhanced_task = task_data.copy()
        enhanced_task.update({
            'priority': self.detect_priority(text).value,
            'category': self.detect_category(text).value,
            'tags': self.extract_tags(text),
            'created_at': datetime.now().isoformat(),
            'reminders': [],
            'comments': [],
            'estimated_time': None,  # –í—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö
            'actual_time': None,     # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è
            'deadline': None,        # –î–µ–¥–ª–∞–π–Ω
            'progress': 0,           # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        })
        
        return enhanced_task
    
    def add_comment(self, task_id: int, user_id: int, user_name: str, comment: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ"""
        from services_veretevo.task_service import get_task_by_id, save_tasks
        
        task = get_task_by_id(task_id)
        if not task:
            return False
        
        comment_data = {
            'id': len(task.get('comments', [])) + 1,
            'user_id': user_id,
            'user_name': user_name,
            'text': comment,
            'created_at': datetime.now().isoformat()
        }
        
        if 'comments' not in task:
            task['comments'] = []
        
        task['comments'].append(comment_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        from services_veretevo.task_service import tasks, save_tasks
        for i, t in enumerate(tasks):
            if t.get('id') == task_id:
                tasks[i] = task
                break
        
        save_tasks()
        return True
    
    def set_reminder(self, task_id: int, reminder_time: datetime, message: str = "") -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        reminder = TaskReminder(
            task_id=task_id,
            reminder_time=reminder_time,
            message=message or f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ #{task_id}"
        )
        
        self.reminders.append(reminder)
        return True
    
    def get_due_reminders(self) -> List[TaskReminder]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"""
        now = datetime.now()
        due_reminders = []
        
        for reminder in self.reminders:
            if not reminder.is_sent and reminder.reminder_time <= now:
                due_reminders.append(reminder)
        
        return due_reminders
    
    def mark_reminder_sent(self, reminder: TaskReminder):
        """–û—Ç–º–µ—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        reminder.is_sent = True
    
    def get_task_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º"""
        from services_veretevo.task_service import get_tasks
        
        tasks = get_tasks()
        
        stats = {
            'total': len(tasks),
            'by_priority': {},
            'by_category': {},
            'by_status': {},
            'overdue': 0,
            'due_today': 0
        }
        
        now = datetime.now()
        
        for task in tasks:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            priority = task.get('priority', 'medium')
            stats['by_priority'][priority] = stats['by_priority'].get(priority, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category = task.get('category', 'other')
            stats['by_category'][category] = stats['by_category'].get(category, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status = task.get('status', 'new')
            stats['by_status'][status] = stats['by_status'].get(status, 0) + 1
            
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            deadline = task.get('deadline')
            if deadline:
                try:
                    deadline_dt = datetime.fromisoformat(deadline)
                    if deadline_dt < now and task.get('status') not in ['completed', 'cancelled']:
                        stats['overdue'] += 1
                    elif deadline_dt.date() == now.date():
                        stats['due_today'] += 1
                except:
                    pass
        
        return stats
    
    def search_tasks(self, query: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ —Ç–µ–∫—Å—Ç—É, —Ç–µ–≥–∞–º, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        from services_veretevo.task_service import get_tasks
        
        tasks = get_tasks()
        query_lower = query.lower()
        
        results = []
        for task in tasks:
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            if query_lower in task.get('text', '').lower():
                results.append(task)
                continue
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
            tags = task.get('tags', [])
            for tag in tags:
                if query_lower in tag.lower():
                    results.append(task)
                    break
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = task.get('category', '')
            if query_lower in category.lower():
                results.append(task)
                continue
            
            # –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            author_name = task.get('author_name', '')
            assistant_name = task.get('assistant_name', '')
            if query_lower in author_name.lower() or query_lower in assistant_name.lower():
                results.append(task)
        
        return results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
enhanced_service = EnhancedTaskService() 