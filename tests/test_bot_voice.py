#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
"""

import os
import sys
import asyncio
import tempfile
from pydub import AudioSegment
from pydub.generators import Sine

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config_veretevo.env import TELEGRAM_TOKEN, ASSISTANTS_CHAT_ID
from utils_veretevo.yandex_speechkit import YandexSpeechKitTranscriber

async def test_voice_transcription():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä
        transcriber = YandexSpeechKitTranscriber()
        print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
        print("üéµ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª...")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ—á–∏)
        sample_rate = 48000
        duration = 2000  # 2 —Å–µ–∫—É–Ω–¥—ã
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–Ω–æ–≤ —Ä–∞–∑–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ—á–∏)
        audio = AudioSegment.silent(duration=duration)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–Ω–æ–≤ —Ä–∞–∑–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã
        frequencies = [220, 440, 330, 550]  # –†–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
        segment_duration = duration // len(frequencies)
        
        for i, freq in enumerate(frequencies):
            start_time = i * segment_duration
            end_time = (i + 1) * segment_duration
            tone = Sine(freq).to_audio_segment(duration=segment_duration)
            audio = audio.overlay(tone, position=start_time)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OGG —Ñ–æ—Ä–º–∞—Ç
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
            audio.export(
                temp_file.name, 
                format='ogg', 
                codec='libopus',
                parameters=["-ac", "1", "-ar", "48000", "-b:a", "64k"]
            )
            test_voice_path = temp_file.name
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_voice_path}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        print("üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        transcript = transcriber.process_audio_file(test_voice_path)
        
        if transcript:
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç: '{transcript}'")
            return True
        else:
            print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if 'test_voice_path' in locals() and os.path.exists(test_voice_path):
            try:
                os.unlink(test_voice_path)
                print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {e}")

async def test_bot_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É...")
    
    try:
        from telegram import Bot
        
        bot = Bot(token=TELEGRAM_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        print(f"   ID: {bot_info.id}")
        print(f"   –ò–º—è: {bot_info.first_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
        try:
            chat = await bot.get_chat(ASSISTANTS_CHAT_ID)
            print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤: {chat.title}")
            print(f"   –¢–∏–ø —á–∞—Ç–∞: {chat.type}")
            return True
        except Exception as e:
            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞...\n")
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
    test1_passed = await test_bot_connection()
    
    # –¢–µ—Å—Ç 2: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    test2_passed = await test_voice_transcription()
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_passed else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_passed else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º.")
        
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞: tail -f logs/bot.log")
    print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ")

if __name__ == "__main__":
    asyncio.run(main()) 