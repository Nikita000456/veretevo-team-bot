#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import sys
import os
import tempfile
import asyncio
from unittest.mock import Mock, AsyncMock, MagicMock
from pydub.generators import Sine

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def create_realistic_voice_file():
    """–°–æ–∑–¥–∞–µ—Ç –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∑–≤—É–∫, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ä–µ—á—å
        duration_ms = 3000  # 3 —Å–µ–∫—É–Ω–¥—ã
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω —Ä–µ—á–∏ (–±–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞)
        base_freq = 150
        speech_base = Sine(base_freq).to_audio_segment(duration=duration_ms)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —á–∞—Å—Ç–æ—Ç—ã (–∫–∞–∫ –≤ —Ä–µ—á–∏)
        variations = []
        for i in range(0, duration_ms, 200):  # –ö–∞–∂–¥—ã–µ 200–º—Å
            freq = base_freq + (i % 100)  # –í–∞—Ä–∏–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã
            segment = Sine(freq).to_audio_segment(duration=200)
            variations.append(segment)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        speech = speech_base
        for segment in variations:
            speech = speech + segment
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
            speech.export(temp_file.name, format='ogg', codec='libopus', 
                         parameters=["-ac", "1", "-ar", "48000", "-b:a", "64k"])
            return temp_file.name
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None

async def test_voice_message_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("üîç –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from handlers_veretevo.tasks import handle_voice_message, voice_transcriber
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
        voice_file_path = create_realistic_voice_file()
        if not voice_file_path:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª")
            return False
            
        print(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {voice_file_path}")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = Mock()
        context = Mock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Mock()
        message.voice = Mock()
        message.voice.file_id = "test_voice_file_id"
        update.message = message
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
        bot = AsyncMock()
        context.bot = bot
        
        # –ú–æ–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_mock = Mock()
        file_mock.download_to_drive = AsyncMock()
        bot.get_file.return_value = file_mock
        
        # –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        message.reply_text = AsyncMock()
        
        print("‚úÖ –ú–æ–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º voice_transcriber –Ω–∞–ø—Ä—è–º—É—é
        print("üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º voice_transcriber –Ω–∞–ø—Ä—è–º—É—é...")
        if voice_transcriber:
            transcript = voice_transcriber.process_audio_file(voice_file_path)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: '{transcript}'")
            
            if transcript and transcript.strip():
                print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            else:
                print("‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏–æ)")
        else:
            print("‚ùå voice_transcriber –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        print("üé§ –í—ã–∑—ã–≤–∞–µ–º handle_voice_message...")
        await handle_voice_message(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if bot.get_file.called:
            print("‚úÖ get_file() –±—ã–ª –≤—ã–∑–≤–∞–Ω")
        else:
            print("‚ùå get_file() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
            
        if message.reply_text.called:
            print("‚úÖ reply_text() –±—ã–ª –≤—ã–∑–≤–∞–Ω")
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            call_args = message.reply_text.call_args
            if call_args:
                reply_text = call_args[0][0] if call_args[0] else ""
                print(f"   –û—Ç–≤–µ—Ç: {reply_text[:100]}...")
        else:
            print("‚ùå reply_text() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
            
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.unlink(voice_file_path)
        print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_voice_transcriber_with_real_file():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç voice_transcriber —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ voice_transcriber —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ñ–∞–π–ª–æ–º...")
    
    try:
        from handlers_veretevo.tasks import voice_transcriber
        
        if not voice_transcriber:
            print("‚ùå voice_transcriber –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ñ–∞–π–ª
        voice_file_path = create_realistic_voice_file()
        if not voice_file_path:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª")
            return False
            
        print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {voice_file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        import os
        file_size = os.path.getsize(voice_file_path)
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        print("üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        transcript = voice_transcriber.process_audio_file(voice_file_path)
        
        if transcript and transcript.strip():
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: '{transcript}'")
        else:
            print("‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏–æ)")
            
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        os.unlink(voice_file_path)
        print("üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

async def main():
    print("üöÄ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n")
    
    # –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    simulation_ok = await test_voice_message_simulation()
    
    # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ voice_transcriber —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ñ–∞–π–ª–æ–º
    transcriber_ok = await test_voice_transcriber_with_real_file()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –°–∏–º—É–ª—è—Ü–∏—è: {'‚úÖ –û–ö' if simulation_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"   –¢—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä: {'‚úÖ –û–ö' if transcriber_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if simulation_ok and transcriber_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É")
        print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main())
