import pytest
import asyncio
from unittest.mock import Mock, AsyncMock, patch, MagicMock
from telegram import Update, CallbackQuery, Message, User, Chat
from telegram.ext import ContextTypes
from handlers_veretevo.tasks import (
    assign_department,
    assign_assistant,
    receive_task_text,
    new_task_start
)
import tempfile
import json
import os

class MockUpdate:
    def __init__(self, user_id=123, chat_id=456, text="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞"):
        self.effective_user = Mock()
        self.effective_user.id = user_id
        self.effective_user.full_name = "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        self.effective_chat = Mock()
        self.effective_chat.id = chat_id
        self.effective_chat.type = "private"
        
        self.message = Mock()
        self.message.text = text
        self.message.reply_text = AsyncMock()
        
        self.callback_query = Mock()
        self.callback_query.data = "assign_none"
        self.callback_query.message = self.message
        self.callback_query.answer = AsyncMock()
        self.callback_query.edit_message_reply_markup = AsyncMock()

class MockContext:
    def __init__(self, user_data=None):
        self.user_data = user_data or {
            'creating_task': True,
            'task_text': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
            'department': 'assistants'
        }
        self.application = Mock()
        self.bot = Mock()

# –¢–µ—Å—Ç 1: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@pytest.mark.asyncio
async def test_invalid_user_id_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    test_cases = [
        "assign_none",           # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
        "assign_123",            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
        "assign_invalid",        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª—É—á–∞–π
        "assign_",               # –ü—É—Å—Ç–æ–π ID
        "assign_abc",            # –ë—É–∫–≤–µ–Ω–Ω—ã–π ID
        "assign_123.45",         # –î—Ä–æ–±–Ω—ã–π ID
        "assign_-123",           # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID
    ]
    
    for callback_data in test_cases:
        update = MockUpdate()
        update.callback_query.data = callback_data
        context = MockContext()
        
        with patch('handlers_veretevo.tasks.department_service') as mock_dept:
            mock_dept.DEPARTMENTS = {
                'assistants': {
                    'name': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã',
                    'chat_id': -100123456789,
                    'members': {'123': '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                }
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π
            try:
                result = await assign_department(update, context)
            except ValueError:
                # ValueError –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID
                pass
            except Exception as e:
                pytest.fail(f"assign_department –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å —Å {type(e).__name__} –¥–ª—è '{callback_data}': {e}")

# –¢–µ—Å—Ç 2: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
@pytest.mark.asyncio
async def test_missing_context_data():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    update = MockUpdate()
    context = MockContext(user_data=None)  # –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    
    with patch('handlers_veretevo.tasks.department_service') as mock_dept:
        mock_dept.get_user_departments.return_value = [('assistants', '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã')]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç
        try:
            result = await new_task_start(update, context)
        except AttributeError:
            pytest.fail("new_task_start –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ user_data")

# –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ
@pytest.mark.asyncio
async def test_invalid_callback_data():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö"""
    invalid_callbacks = [
        "invalid_data",
        "assign",
        "assign_",
        "assign_none_extra",
        "assign_123_extra",
        "",
        None,
    ]
    
    for callback_data in invalid_callbacks:
        update = MockUpdate()
        update.callback_query.data = callback_data
        context = MockContext()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç
        try:
            result = await assign_type_callback(update, context)
        except Exception as e:
            pytest.fail(f"assign_type_callback –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –¥–ª—è '{callback_data}': {e}")

# –¢–µ—Å—Ç 4: –û—à–∏–±–∫–∏ —Å–µ—Ç–∏
@pytest.mark.asyncio
async def test_network_errors():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
    update = MockUpdate()
    context = MockContext()
    
    with patch('handlers_veretevo.tasks.department_service') as mock_dept:
        mock_dept.DEPARTMENTS = {
            'assistants': {
                'name': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã',
                'chat_id': -100123456789,
                'members': {'123': '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
            }
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        update.message.reply_text.side_effect = Exception("Network error")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
        try:
            result = await new_task_start(update, context)
        except Exception as e:
            # –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞, –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π
            assert "Network error" in str(e)

# –¢–µ—Å—Ç 5: –ü—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∑–∞–¥–∞—á
@pytest.mark.asyncio
async def test_empty_task_text():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞–¥–∞—á"""
    test_cases = [
        "",                    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "   ",                # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
        "\n\n\n",             # –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        None,                 # None
    ]
    
    for text in test_cases:
        update = MockUpdate(text=text)
        context = MockContext()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã
        try:
            result = await receive_task_text(update, context)
        except Exception as e:
            pytest.fail(f"receive_task_text –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ '{text}': {e}")

# –¢–µ—Å—Ç 6: –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∑–∞–¥–∞—á
@pytest.mark.asyncio
async def test_very_long_task_text():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞–¥–∞—á"""
    long_text = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ " * 100  # ~3000 —Å–∏–º–≤–æ–ª–æ–≤
    
    update = MockUpdate(text=long_text)
    context = MockContext()
    
    with patch('handlers_veretevo.tasks.department_service') as mock_dept:
        mock_dept.DEPARTMENTS = {
            'assistants': {
                'name': '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã',
                'members': {'123': '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        try:
            result = await receive_task_text(update, context)
        except Exception as e:
            pytest.fail(f"receive_task_text –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")

# –¢–µ—Å—Ç 7: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
@pytest.mark.asyncio
async def test_special_characters_in_text():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
    special_texts = [
        "–ó–∞–¥–∞—á–∞ —Å —ç–º–æ–¥–∑–∏ üéâüìù‚úÖ",
        "–ó–∞–¥–∞—á–∞ —Å HTML <b>–∂–∏—Ä–Ω—ã–π</b> —Ç–µ–∫—Å—Ç",
        "–ó–∞–¥–∞—á–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏: !@#$%^&*()",
        "–ó–∞–¥–∞—á–∞ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π: –ø—Ä–∏–≤–µ—Ç –º–∏—Ä",
        "–ó–∞–¥–∞—á–∞ —Å —á–∏—Å–ª–∞–º–∏: 1234567890",
        "–ó–∞–¥–∞—á–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏\n—Å—Ç—Ä–æ–∫",
        "–ó–∞–¥–∞—á–∞ —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π\t—Ç–µ–∫—Å—Ç",
    ]
    
    for text in special_texts:
        update = MockUpdate(text=text)
        context = MockContext()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        try:
            result = await receive_task_text(update, context)
        except Exception as e:
            pytest.fail(f"receive_task_text –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{text}': {e}")

# –¢–µ—Å—Ç 8: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
@pytest.mark.asyncio
async def test_concurrent_requests():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    update1 = MockUpdate(user_id=123)
    update2 = MockUpdate(user_id=456)
    context1 = MockContext()
    context2 = MockContext()
    
    with patch('handlers_veretevo.tasks.department_service') as mock_dept:
        mock_dept.get_user_departments.return_value = [('assistants', '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã')]
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        try:
            result1 = await new_task_start(update1, context1)
            result2 = await new_task_start(update2, context2)
        except Exception as e:
            pytest.fail(f"new_task_start –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö: {e}")

# –¢–µ—Å—Ç 9: –û—à–∏–±–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
@pytest.mark.asyncio
async def test_service_errors():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö"""
    update = MockUpdate()
    context = MockContext()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ department_service
    with patch('handlers_veretevo.tasks.department_service') as mock_dept:
        mock_dept.get_user_departments.side_effect = Exception("Service error")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å–µ—Ä–≤–∏—Å–∞
        try:
            result = await new_task_start(update, context)
        except Exception as e:
            # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞, –Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
            assert "Service error" in str(e)

# –¢–µ—Å—Ç 10: –ü—Ä–µ–¥–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
@pytest.mark.asyncio
async def test_boundary_values():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π user_id
    update = MockUpdate(user_id=999999999999)
    context = MockContext()
    
    with patch('handlers_veretevo.tasks.department_service') as mock_dept:
        mock_dept.get_user_departments.return_value = [('assistants', '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã')]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ ID
        try:
            result = await new_task_start(update, context)
        except Exception as e:
            pytest.fail(f"new_task_start –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –¥–ª—è –±–æ–ª—å—à–æ–≥–æ user_id: {e}")

# –¢–µ—Å—Ç 11: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–¥–µ–ª—ã
@pytest.mark.asyncio
async def test_missing_departments():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–¥–µ–ª–æ–≤"""
    update = MockUpdate()
    context = MockContext()
    
    with patch('handlers_veretevo.tasks.department_service') as mock_dept:
        mock_dept.DEPARTMENTS = {}  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–¥–µ–ª–æ–≤
        try:
            result = await list_tasks(update, context)
        except Exception as e:
            pytest.fail(f"list_tasks –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–¥–µ–ª–æ–≤: {e}")

# –¢–µ—Å—Ç 12: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á
@pytest.mark.asyncio
async def test_invalid_task_data():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    invalid_tasks = [
        {},  # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        {"id": "invalid"},  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
        {"text": None},  # None –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
        {"status": "invalid_status"},  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    ]
    
    for task in invalid_tasks:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ add_or_update_task –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            add_or_update_task(task)
        except Exception as e:
            # –û—à–∏–±–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            pass

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 