#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
"""

import os
import tempfile
import requests
from pydub import AudioSegment
from pydub.generators import Sine, WhiteNoise
from utils_veretevo.yandex_speechkit import YandexSpeechKitTranscriber

def create_speech_like_audio():
    """–°–æ–∑–¥–∞–µ—Ç –∞—É–¥–∏–æ, –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —Ä–µ—á—å"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∑–≤—É–∫, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ä–µ—á—å
        duration_ms = 3000  # 3 —Å–µ–∫—É–Ω–¥—ã
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω —Ä–µ—á–∏ (–±–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞)
        base_freq = 150
        speech_base = Sine(base_freq).to_audio_segment(duration=duration_ms)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —á–∞—Å—Ç–æ—Ç—ã (–∫–∞–∫ –≤ —Ä–µ—á–∏)
        variations = []
        for i in range(0, duration_ms, 200):  # –ö–∞–∂–¥—ã–µ 200–º—Å
            freq = base_freq + (i % 100)  # –í–∞—Ä–∏–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã
            segment = Sine(freq).to_audio_segment(duration=200)
            variations.append(segment)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        speech = AudioSegment.empty()
        for segment in variations:
            speech = speech + segment
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        noise = WhiteNoise().to_audio_segment(duration=duration_ms)
        noise = noise - 25  # –¢–∏—Ö–∏–π —à—É–º
        
        # –°–º–µ—à–∏–≤–∞–µ–º —Ä–µ—á—å –∏ —à—É–º
        final_audio = speech.overlay(noise)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        final_audio = final_audio.normalize()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
            final_audio.export(temp_file.name, format='ogg', codec='libopus', 
                             parameters=["-ac", "1", "-ar", "48000", "-b:a", "64k"])
            return temp_file.name
            
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ: {e}")
        return None

def test_with_real_voice_simulation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä
        transcriber = YandexSpeechKitTranscriber()
        print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ, –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —Ä–µ—á—å
        print("üéµ –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ, –∏–º–∏—Ç–∏—Ä—É—é—â–µ–µ —Ä–µ—á—å...")
        audio_path = create_speech_like_audio()
        if not audio_path:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            return False
        
        print(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {audio_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(audio_path)
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        if file_size < 1000:
            print("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        print("üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        transcript = transcriber.process_audio_file(audio_path)
        
        if transcript and transcript.strip():
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: '{transcript}'")
            return True
        else:
            print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            print("üí° –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'audio_path' in locals() and os.path.exists(audio_path):
            os.unlink(audio_path)
            print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

def test_api_with_different_formats():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∞—É–¥–∏–æ"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏...")
    
    try:
        transcriber = YandexSpeechKitTranscriber()
        
        # –¢–µ—Å—Ç 1: WAV —Ñ–æ—Ä–º–∞—Ç
        print("üéµ –¢–µ—Å—Ç 1: WAV —Ñ–æ—Ä–º–∞—Ç...")
        tone = Sine(440).to_audio_segment(duration=2000)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as temp_file:
            tone.export(temp_file.name, format='wav', parameters=["-ac", "1", "-ar", "48000"])
            transcript = transcriber.process_audio_file(temp_file.name)
            print(f"   WAV —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{transcript}'")
            os.unlink(temp_file.name)
        
        # –¢–µ—Å—Ç 2: MP3 —Ñ–æ—Ä–º–∞—Ç
        print("üéµ –¢–µ—Å—Ç 2: MP3 —Ñ–æ—Ä–º–∞—Ç...")
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_file:
            tone.export(temp_file.name, format='mp3', parameters=["-ac", "1", "-ar", "48000"])
            transcript = transcriber.process_audio_file(temp_file.name)
            print(f"   MP3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{transcript}'")
            os.unlink(temp_file.name)
        
        # –¢–µ—Å—Ç 3: –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ñ–∞–π–ª
        print("üéµ –¢–µ—Å—Ç 3: –î–ª–∏–Ω–Ω—ã–π —Ñ–∞–π–ª (5 —Å–µ–∫—É–Ω–¥)...")
        long_tone = Sine(440).to_audio_segment(duration=5000)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
            long_tone.export(temp_file.name, format='ogg', codec='libopus', 
                           parameters=["-ac", "1", "-ar", "48000", "-b:a", "64k"])
            transcript = transcriber.process_audio_file(temp_file.name)
            print(f"   –î–ª–∏–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{transcript}'")
            os.unlink(temp_file.name)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {e}")

def main():
    print("üöÄ –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –≥–æ–ª–æ—Å–æ–º\n")
    
    # –¢–µ—Å—Ç 1: –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
    success1 = test_with_real_voice_simulation()
    
    # –¢–µ—Å—Ç 2: –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    test_api_with_different_formats()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ—á–∏: {'‚úÖ –£–°–ü–ï–•' if success1 else '‚ùå –ü–†–û–í–ê–õ'}")
    
    print("\nüí° –í—ã–≤–æ–¥—ã:")
    print("1. API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("2. –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–Ω—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è –∫–∞–∫ —Ä–µ—á—å")
    print("3. –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å")
    print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É")

if __name__ == "__main__":
    main()
