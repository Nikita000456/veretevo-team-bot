#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
"""

import os
import tempfile
import numpy as np
from pydub import AudioSegment
from pydub.generators import Sine, WhiteNoise
from utils_veretevo.yandex_speechkit import YandexSpeechKitTranscriber

def create_realistic_voice():
    """–°–æ–∑–¥–∞–µ—Ç –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —Å —Ä–µ—á—å—é"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–æ–Ω —Ä–µ—á–∏ (200-300 Hz)
        sample_rate = 48000
        duration_ms = 3000  # 3 —Å–µ–∫—É–Ω–¥—ã
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω —Ä–µ—á–∏
        base_freq = 220  # –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Ä–µ—á–∏
        base_tone = Sine(base_freq).to_audio_segment(duration=duration_ms)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∑–≤—É–∫–∞
        harmonics = []
        for i in range(2, 5):  # –î–æ–±–∞–≤–ª—è–µ–º 2-4 –≥–∞—Ä–º–æ–Ω–∏–∫–∏
            harmonic = Sine(base_freq * i).to_audio_segment(duration=duration_ms)
            harmonic = harmonic - 20  # –£–º–µ–Ω—å—à–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –≥–∞—Ä–º–æ–Ω–∏–∫
            harmonics.append(harmonic)
        
        # –°–æ–∑–¥–∞–µ–º —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        noise = WhiteNoise().to_audio_segment(duration=duration_ms)
        noise = noise - 30  # –û—á–µ–Ω—å —Ç–∏—Ö–∏–π —à—É–º
        
        # –°–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        voice = base_tone
        for harmonic in harmonics:
            voice = voice.overlay(harmonic)
        voice = voice.overlay(noise)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        voice = voice.normalize()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
            voice.export(temp_file.name, format='ogg', codec='libopus', 
                        parameters=["-ac", "1", "-ar", "48000", "-b:a", "64k"])
            return temp_file.name
            
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª: {e}")
        return None

def test_realistic_transcription():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –≥–æ–ª–æ—Å–æ–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –≥–æ–ª–æ—Å–æ–º...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä
        transcriber = YandexSpeechKitTranscriber()
        print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...")
        if transcriber.test_connection():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
        print("üéµ –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª...")
        voice_path = create_realistic_voice()
        if not voice_path:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª")
            return False
        
        print(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {voice_path}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        print("üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        transcript = transcriber.process_audio_file(voice_path)
        
        if transcript and transcript.strip():
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: '{transcript}'")
            return True
        else:
            print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'voice_path' in locals() and os.path.exists(voice_path):
            os.unlink(voice_path)
            print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

def main():
    print("üöÄ –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –≥–æ–ª–æ—Å–æ–º\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = test_realistic_transcription()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –ü–†–û–í–ê–õ'}")
    
    if not success:
        print("\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        print("   1. API –∫–ª—é—á Yandex SpeechKit –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        print("   2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ Yandex Cloud")
        print("   3. –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ API")
        print("   4. –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ —Ç–∏—Ö–∏–π")

if __name__ == "__main__":
    main()
