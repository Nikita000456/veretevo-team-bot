#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_handler_registration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from handlers_veretevo.tasks import register_task_handlers
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ application
        from unittest.mock import Mock
        application = Mock()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
        register_task_handlers(application)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ add_handler –±—ã–ª –≤—ã–∑–≤–∞–Ω
        if application.add_handler.called:
            print("‚úÖ add_handler() –±—ã–ª –≤—ã–∑–≤–∞–Ω")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤: {application.add_handler.call_count}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã
            calls = application.add_handler.call_args_list
            for i, call in enumerate(calls):
                handler = call[0][0] if call[0] else None
                if handler:
                    print(f"   –í—ã–∑–æ–≤ {i+1}: {type(handler).__name__}")
        else:
            print("‚ùå add_handler() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_voice_handler_availability():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from handlers_veretevo.tasks import handle_voice_message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—É—Ç–∏–Ω–æ–π
        import inspect
        if inspect.iscoroutinefunction(handle_voice_message):
            print("‚úÖ handle_voice_message —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—É—Ç–∏–Ω–æ–π")
        else:
            print("‚ùå handle_voice_message –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—É—Ç–∏–Ω–æ–π")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
        sig = inspect.signature(handle_voice_message)
        params = list(sig.parameters.keys())
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        if 'update' in params and 'context' in params:
            print("‚úÖ –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_voice_transcriber_availability():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å voice_transcriber"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ voice_transcriber...")
    
    try:
        from handlers_veretevo.tasks import voice_transcriber
        
        if voice_transcriber:
            print("‚úÖ voice_transcriber –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –¢–∏–ø: {type(voice_transcriber)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
            methods = ['process_audio_file', 'transcribe_audio', 'convert_audio_to_ogg']
            for method in methods:
                if hasattr(voice_transcriber, method):
                    print(f"   ‚úÖ –ú–µ—Ç–æ–¥ {method} –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"   ‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå voice_transcriber –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ voice_transcriber: {e}")
        return False

def main():
    print("üöÄ –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n")
    
    # –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    registration_ok = test_handler_registration()
    
    # –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    handler_ok = test_voice_handler_availability()
    
    # –¢–µ—Å—Ç 3: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å voice_transcriber
    transcriber_ok = test_voice_transcriber_availability()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {'‚úÖ –û–ö' if registration_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫: {'‚úÖ –û–ö' if handler_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"   –¢—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä: {'‚úÖ –û–ö' if transcriber_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if registration_ok and handler_ok and transcriber_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

if __name__ == "__main__":
    main()
