import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, Application
from config_veretevo.constants import GENERAL_DIRECTOR_ID
from utils_veretevo.keyboards import main_menu_keyboard
from telegram.ext import ChatMemberHandler
from services_veretevo import department_service
from telegram.constants import ChatType
from services_veretevo.notification_service import NotificationService


def register_menu_handlers(application: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram.

    Args:
        application (Application): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Application.
    """
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), go_main_menu))
    application.add_handler(MessageHandler(filters.Regex("–ü–æ–º–æ—â—å"), help_command))
    application.add_handler(MessageHandler(filters.Regex("^–ü–æ–º–æ—â—å$"), help_command))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, auto_add_member))
    application.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, auto_remove_member))
    application.add_handler(CommandHandler("set_department", set_department))
    application.add_handler(CommandHandler("sync_members", sync_members))
    application.add_handler(CommandHandler("notify_update", notify_update))
    application.add_handler(CommandHandler("notify_all", notify_all))


async def go_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –≤ –ª–∏—á–∫–µ ‚Äî —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    chat_type = update.effective_chat.type if update.effective_chat else "private"
    user_id = update.effective_user.id if update.effective_user else None
    if chat_type == "private":
        reply_markup = main_menu_keyboard(chat_type, user_id)
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=ReplyKeyboardRemove())


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    logging.debug("start –≤—ã–∑–≤–∞–Ω")
    chat_type = update.effective_chat.type if update.effective_chat else "private"
    if chat_type != "private":
        await update.message.reply_text("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–π —á–∞—Ç!", reply_markup=ReplyKeyboardRemove())
        return  # –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ /start –≤ –≥—Ä—É–ø–ø–∞—Ö
    
    user = update.effective_user
    user_id = user.id if user else None
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if user_id and hasattr(context, 'bot') and context.bot:
        try:
            notification_service = NotificationService(context.bot)
            notification_service.register_user(
                user_id=user_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
        except Exception as e:
            logging.error(f"[NOTIFICATION] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    reply_markup = main_menu_keyboard(chat_type, user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø TaskBot.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞. –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    logging.debug("help_command –≤—ã–∑–≤–∞–Ω")
    user_id = update.effective_user.id if update.effective_user else None
    if user_id == GENERAL_DIRECTOR_ID:
        text = (
            "üõ†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n"
            "/add_member <b>–æ—Ç–¥–µ–ª</b> <b>user_id</b> <b>–ò–º—è</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª\n"
            "/remove_member <b>–æ—Ç–¥–µ–ª</b> <b>user_id</b> ‚Äî —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –æ—Ç–¥–µ–ª–∞\n"
            "/list_members <b>–æ—Ç–¥–µ–ª</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª–∞\n"
            "/set_department <b>–æ—Ç–¥–µ–ª</b> ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∫ –æ—Ç–¥–µ–ª—É (–¥–ª—è –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
            "\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "/add_member assistants 123456789 –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
            "/remove_member finance 123456789\n"
            "/list_members assistants\n"
            "/set_department carpenters\n"
            "\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "- üìå –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
            "- üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞\n"
            "- –ú–æ–∏ –∑–∞–¥–∞—á–∏ ‚Äî –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "\n<b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:</b>\n"
            "- –ï—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –æ—Ç–¥–µ–ª–∞, –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —á–ª–µ–Ω–∞–º–∏ –æ—Ç–¥–µ–ª–∞.\n"
            "- –î–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ç–¥–µ–ª—É —á–µ—Ä–µ–∑ /set_department.\n"
        )
    else:
        text = (
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "- üìå –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
            "- üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–∞\n"
            "- –ú–æ–∏ –∑–∞–¥–∞—á–∏ ‚Äî –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        )
    if update.effective_chat and update.effective_chat.type == "private":
        reply_markup = main_menu_keyboard("private", user_id)
        await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())


async def auto_add_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    if not chat or not chat.id:
        return
    # –ù–∞–π—Ç–∏ –æ—Ç–¥–µ–ª –ø–æ chat_id
    department = None
    for dep_key, dep in department_service.DEPARTMENTS.items():
        if dep.get("chat_id") == chat.id:
            department = dep
            department_key = dep_key
            break
    if not department:
        return
    for member in update.message.new_chat_members:
        user_id = str(member.id)
        name = member.full_name or member.username or f"user_{user_id}"
        if user_id not in department["members"]:
            department["members"][user_id] = name
            department_service.save_departments()
            logging.info(f"[AUTO-ADD] {name} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª {department['name']}")

async def auto_remove_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    if not chat or not chat.id:
        return
    department = None
    for dep_key, dep in department_service.DEPARTMENTS.items():
        if dep.get("chat_id") == chat.id:
            department = dep
            department_key = dep_key
            break
    if not department:
        return
    left_member = update.message.left_chat_member
    if left_member:
        user_id = str(left_member.id)
        if user_id in department["members"]:
            name = department["members"].pop(user_id)
            department_service.save_departments()
            logging.info(f"[AUTO-REMOVE] {name} ({user_id}) —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç–¥–µ–ª–∞ {department['name']}")

async def set_department(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id if update.effective_user else None
    if user_id != GENERAL_DIRECTOR_ID:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    chat = update.effective_chat
    if not chat or chat.type == "private":
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    args = context.args if hasattr(context, 'args') else []
    if not args or len(args) < 1:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –æ—Ç–¥–µ–ª–∞. –ü—Ä–∏–º–µ—Ä: /set_department finance")
        return
    dep_key = args[0]
    if dep_key not in department_service.DEPARTMENTS:
        await update.message.reply_text(f"–û—Ç–¥–µ–ª '{dep_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    department_service.DEPARTMENTS[dep_key]["chat_id"] = chat.id
    department_service.save_departments()
    await update.message.reply_text(f"–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ç–¥–µ–ª—É '{department_service.DEPARTMENTS[dep_key]['name']}'. –¢–µ–ø–µ—Ä—å –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ –æ—Ç–¥–µ–ª.")

async def sync_members(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id if update.effective_user else None
    if user_id != GENERAL_DIRECTOR_ID:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    args = context.args if hasattr(context, 'args') else []
    if not args or len(args) < 1:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –æ—Ç–¥–µ–ª–∞. –ü—Ä–∏–º–µ—Ä: /sync_members assistants")
        return
    dep_key = args[0]
    dep = department_service.DEPARTMENTS.get(dep_key)
    if not dep:
        await update.message.reply_text(f"–û—Ç–¥–µ–ª '{dep_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    chat_id = dep.get("chat_id")
    if not chat_id:
        await update.message.reply_text("–î–ª—è –æ—Ç–¥–µ–ª–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.")
        return
    try:
        chat = await context.bot.get_chat(chat_id)
        if chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
            await update.message.reply_text("–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π.")
            return
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (getChatAdministrators) –∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (getChatMemberCount)
        admins = await context.bot.get_chat_administrators(chat_id)
        admin_ids = {str(admin.user.id): admin.user.full_name or admin.user.username or f"user_{admin.user.id}" for admin in admins}
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        count = await context.bot.get_chat_member_count(chat_id)
        # –í–ù–ò–ú–ê–ù–ò–ï: Telegram Bot API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ –æ–¥–Ω–æ–º—É —á–µ—Ä–µ–∑ getChatMember
        # –ü–æ—ç—Ç–æ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ (–∏–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–±–æ—Ä –ø–æ user_id, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã)
        dep["members"] = admin_ids
        department_service.save_departments()
        await update.message.reply_text(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –≤ –æ—Ç–¥–µ–ª–µ {dep['name']} {len(admin_ids)} –∞–¥–º–∏–Ω(–æ–≤) –∏–∑ –≥—Ä—É–ø–ø—ã (–≤—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}).")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

async def notify_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user_id = update.effective_user.id if update.effective_user else None
    if user_id != GENERAL_DIRECTOR_ID:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    args = context.args if hasattr(context, 'args') else []
    if len(args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify_update <–∑–∞–≥–æ–ª–æ–≤–æ–∫> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
            "–ü—Ä–∏–º–µ—Ä: /notify_update \"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é\" \"–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\""
        )
        return
    
    title = args[0]
    description = " ".join(args[1:])
    
    try:
        notification_service = NotificationService(context.bot)
        notification_id = await notification_service.send_update_notification(title, description)
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (ID: {notification_id})"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def notify_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user_id = update.effective_user.id if update.effective_user else None
    if user_id != GENERAL_DIRECTOR_ID:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    args = context.args if hasattr(context, 'args') else []
    if len(args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify_all <–∑–∞–≥–æ–ª–æ–≤–æ–∫> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n"
            "–ü—Ä–∏–º–µ—Ä: /notify_all \"–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\" \"–ü–ª–∞–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\""
        )
        return
    
    title = args[0]
    message = " ".join(args[1:])
    
    try:
        notification_service = NotificationService(context.bot)
        notification_id = notification_service.create_notification(
            title=title,
            message=message,
            notification_type="announcement"
        )
        await notification_service.send_notification_to_all(notification_id)
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (ID: {notification_id})"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")