"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª—é–±–æ–º —á–∞—Ç–µ.
"""
import logging
import tempfile
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, MessageHandler, filters
from utils_veretevo.yandex_speechkit import YandexSpeechKitTranscriber
from utils_veretevo.yandex_gpt import improve_task_text
from services_veretevo.department_service import DEPARTMENTS, load_departments
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Yandex SpeechKit —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä
try:
    voice_transcriber = YandexSpeechKitTranscriber()
    logging.info("[INFO] Yandex SpeechKit —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logging.error(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Yandex SpeechKit: {e}")
    voice_transcriber = None

async def handle_voice_message_universal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤.
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    if not update.message.voice:
        return
    
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    user = update.effective_user
    
    logging.info(f"[VOICE] –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} ({chat_type}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id if user else 'Unknown'}")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    try:
        file = await context.bot.get_file(update.message.voice.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_audio:
            await file.download_to_drive(temp_audio.name)
            logging.info(f"[VOICE] –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_audio.name}")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            transcript = None
            if voice_transcriber:
                try:
                    transcript = voice_transcriber.process_audio_file(temp_audio.name)
                    logging.info(f"[VOICE] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: '{transcript}'")
                except Exception as e:
                    logging.error(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
                    transcript = None
            else:
                logging.error(f"[VOICE] voice_transcriber —Ä–∞–≤–µ–Ω None!")
                await update.message.reply_text("‚ö†Ô∏è –°–ª—É–∂–±–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_audio.name)
            
            if transcript and transcript.strip():
                # –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Yandex GPT
                try:
                    improved = improve_task_text(transcript)
                    logging.info(f"[VOICE] –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{improved}'")
                except Exception as e:
                    logging.error(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
                    improved = transcript
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª –ø–æ —Ç–µ–∫—Å—Ç—É
                dep_key = extract_department_from_text(improved)
                dep_name = None
                if dep_key and dep_key in DEPARTMENTS:
                    dep_name = DEPARTMENTS[dep_key]['name']
                    logging.info(f"[VOICE] –ù–∞–π–¥–µ–Ω –æ—Ç–¥–µ–ª: {dep_name}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response_text = f"üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{improved}"
                
                if dep_name:
                    response_text += f"\n\nüè¢ **–û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–¥–µ–ª:** {dep_name}"
                    
                    # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
                    if chat_type == "private":
                        keyboard = [[InlineKeyboardButton("üìå –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"create_task_from_voice_{dep_key}")]]
                        await update.message.reply_text(
                            response_text + "\n\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É?",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode="Markdown"
                        )
                    else:
                        # –í –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                        await update.message.reply_text(
                            response_text,
                            parse_mode="Markdown"
                        )
                else:
                    # –û—Ç–¥–µ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                    await update.message.reply_text(
                        response_text,
                        parse_mode="Markdown"
                    )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
                
    except Exception as e:
        logging.error(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

def extract_department_from_text(text: str) -> str:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–¥–µ–ª –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Ç–µ–∫—Å—Ç–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –æ—Ç–¥–µ–ª–∞ –∏–ª–∏ None.
    """
    if not text:
        return None
        
    text = text.lower()
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
    dep_map = {
        'assistants': ['–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã', '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '–∞—Å—Å–∏—Å—Ç', '–ø–æ–º–æ—â–Ω–∏–∫', '–ø–æ–º–æ—â–Ω–∏–∫–∏', '–ø–æ–º–æ—â—å', '–ø–æ–º–æ–≥–∏—Ç–µ'],
        'carpenters': ['–ø–ª–æ—Ç–Ω–∏–∫–∏', '–ø–ª–æ—Ç–Ω–∏–∫', '–ø–ª–æ—Ç–Ω–∏—Ü–∫–∏–µ', '–ø–ª–æ—Ç–Ω–∏—Ü–∫–∞—è'],
        'maintenance': ['—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è', '—ç–∫—Å–ø–ª—É–∞—Ç', '—Ç–µ—Ö—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è', '—Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'],
        'tech': ['—Ç–µ—Ö –∫–æ–º–∞–Ω–¥–∞', '—Ç–µ—Ö–∫–æ–º–∞–Ω–¥–∞', '—Ç–µ—Ö', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', '—Ç–µ—Ö–Ω–∏–∫–∏', '—Ç–µ—Ö–Ω–∏–∫'],
        'maids': ['–≥–æ—Ä–Ω–∏—á–Ω—ã–µ', '–≥–æ—Ä–Ω–∏—á–Ω–∞—è', '—É–±–æ—Ä–∫–∞', '—É–±–æ—Ä—â–∏—Ü—ã', '—É–±–æ—Ä—â–∏—Ü–∞', '–∫–ª–∏–Ω–∏–Ω–≥'],
        'reception': ['—Ä–µ—Å–µ–ø—à–µ–Ω', '—Ä–µ—Å–µ–ø', '–ø—Ä–∏—ë–º', '–ø—Ä–∏–µ–º', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', '–∞–¥–º–∏–Ω'],
        'security': ['–æ—Ö—Ä–∞–Ω–∞', '–æ—Ö—Ä–∞–Ω–Ω–∏–∫', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '—Å–µ–∫—å—é—Ä–∏—Ç–∏', '—Å—Ç–æ—Ä–æ–∂'],
        'finance': ['—Ñ–∏–Ω–∞–Ω—Å—ã', '—Ñ–∏–Ω–∞–Ω—Å', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä', '–∫–∞—Å—Å–∞', '–¥–µ–Ω—å–≥–∏', '–æ–ø–ª–∞—Ç–∞'],
        # –ù–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –∏–∑ shared
        'construction': ['—Å—Ç—Ä–æ–π–∫–∞', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π', '—Å—Ç—Ä–æ–∏—Ç–µ–ª–∏', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø–æ—Å—Ç—Ä–æ–π–∫–∞', '–≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç—Ä–æ–π–∫–µ'],
        'management': ['—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–¥–∏—Ä–µ–∫—Ç–æ—Ä'],
        'info': ['–∏–Ω—Ñ–æ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–±—Ä–∏—Ñ–∏–Ω–≥–∏'],
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±—É–¥—É—â–∏—Ö –æ—Ç–¥–µ–ª–æ–≤
        'kitchen': ['–∫—É—Ö–Ω—è', '–ø–æ–≤–∞—Ä', '–ø–æ–≤–∞—Ä–∞', '–∫—É–ª–∏–Ω–∞—Ä–∏—è', '–≥–æ—Ç–æ–≤–∫–∞'],
        'housekeeping': ['—Ö–æ–∑—è–π—Å—Ç–≤–æ', '—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π', '—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ'],
        'engineering': ['–∏–Ω–∂–µ–Ω–µ—Ä–∏—è', '–∏–Ω–∂–µ–Ω–µ—Ä', '–∏–Ω–∂–µ–Ω–µ—Ä—ã', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π'],
        'sales': ['–ø—Ä–æ–¥–∞–∂–∏', '–ø—Ä–æ–¥–∞–≤–µ—Ü', '–ø—Ä–æ–¥–∞–≤—Ü—ã', '–∫–æ–º–º–µ—Ä—Ü–∏—è'],
        'marketing': ['–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ'],
        'hr': ['hr', 'hr-–æ—Ç–¥–µ–ª', '–∫–∞–¥—Ä—ã', '–ø–µ—Ä—Å–æ–Ω–∞–ª', '—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã'],
        'legal': ['—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π', '—é—Ä–∏—Å—Ç', '—é—Ä–∏—Å—Ç—ã', '–ø—Ä–∞–≤–æ–≤–æ–π'],
        'it': ['it', '–∞–π—Ç–∏', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã'],
    }
    
    # –ò—â–µ–º —Ñ—Ä–∞–∑—ã "–æ—Ç–¥–µ–ª ...", "–≤ –æ—Ç–¥–µ–ª ...", "–≤–æ–ø—Ä–æ—Å –ø–æ ...", "–ø—Ä–æ–±–ª–µ–º–∞ —Å ..."
    match = re.search(r'(?:–æ—Ç–¥–µ–ª|–≤ –æ—Ç–¥–µ–ª|–≤–æ–ø—Ä–æ—Å –ø–æ|–ø—Ä–æ–±–ª–µ–º–∞ —Å|–Ω—É–∂–Ω–∞|–Ω—É–∂–µ–Ω)\s+([\w\-]+)', text)
    if match:
        word = match.group(1)
        for dep_key, variants in dep_map.items():
            if word in variants or word in dep_key or word in DEPARTMENTS.get(dep_key, {}).get('name', '').lower():
                return dep_key
    
    # –ò—â–µ–º –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    specific_keywords = {
        'assistants': ['–ø–æ–º–æ–≥–∏—Ç–µ', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'],
        'carpenters': ['–ø–ª–æ—Ç–Ω–∏–∫', '–¥–µ—Ä–µ–≤–æ', '–º–µ–±–µ–ª—å'],
        'maintenance': ['—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è', '—Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'],
        'tech': ['—Ç–µ—Ö –∫–æ–º–∞–Ω–¥–∞', '—Ç–µ—Ö–∫–æ–º–∞–Ω–¥–∞'],
        'maids': ['–≥–æ—Ä–Ω–∏—á–Ω–∞—è', '–∫–ª–∏–Ω–∏–Ω–≥'],
        'reception': ['—Ä–µ—Å–µ–ø—à–µ–Ω', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–≥–æ—Å—Ç—å'],
        'security': ['–æ—Ö—Ä–∞–Ω–∞', '–æ—Ö—Ä–∞–Ω–Ω–∏–∫', '—Å—Ç–æ—Ä–æ–∂'],
        'finance': ['—Ñ–∏–Ω–∞–Ω—Å—ã', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è', '–∫–∞—Å—Å–∞'],
        'construction': ['—Å—Ç—Ä–æ–π–∫–∞', '—Å—Ç—Ä–æ–∏—Ç–µ–ª–∏', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π'],
        'management': ['—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
        'info': ['–∏–Ω—Ñ–æ', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–±—Ä–∏—Ñ–∏–Ω–≥–∏'],
        'kitchen': ['–∫—É—Ö–Ω—è', '–ø–æ–≤–∞—Ä', '–∫—É–ª–∏–Ω–∞—Ä–∏—è'],
        'housekeeping': ['—Ö–æ–∑—è–π—Å—Ç–≤–æ', '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'],
        'engineering': ['–∏–Ω–∂–µ–Ω–µ—Ä–∏—è', '–∏–Ω–∂–µ–Ω–µ—Ä'],
        'sales': ['–ø—Ä–æ–¥–∞–∂–∏', '–ø—Ä–æ–¥–∞–≤–µ—Ü'],
        'marketing': ['–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Ä–µ–∫–ª–∞–º–∞'],
        'hr': ['hr-–æ—Ç–¥–µ–ª', '–∫–∞–¥—Ä—ã', '–ø–µ—Ä—Å–æ–Ω–∞–ª'],
        'legal': ['—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π', '—é—Ä–∏—Å—Ç'],
        'it': ['it', '–∞–π—Ç–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã'],
    }
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for dep_key, keywords in specific_keywords.items():
        for keyword in keywords:
            if keyword in text:
                return dep_key
    
    # –ó–∞—Ç–µ–º –∏—â–µ–º –ø–æ –æ–±—â–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–º–µ–Ω–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ)
    general_keywords = {
        'assistants': ['–ø–æ–º–æ—â—å', '–ø–æ–º–æ—â–Ω–∏–∫'],
        'carpenters': ['—Ä–µ–º–æ–Ω—Ç', '–ø–æ—Å—Ç—Ä–æ–π–∫–∞'],
        'maintenance': ['–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '—Ç–µ—Ö–Ω–∏–∫–∞', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'],
        'tech': ['—Ç–µ—Ö', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', '—Ç–µ—Ö–Ω–∏–∫–∏'],
        'maids': ['—É–±–æ—Ä—â–∏—Ü—ã', '—á–∏—Å—Ç–æ—Ç–∞', '–ø–æ—Å—Ç–µ–ª—å', '–±–µ–ª—å–µ'],
        'reception': ['–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', '–∞–¥–º–∏–Ω', '–Ω–æ–º–µ—Ä', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
        'security': ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '—Å–µ–∫—å—é—Ä–∏—Ç–∏', '–ø—Ä–æ–ø—É—Å–∫', '–∫–æ–Ω—Ç—Ä–æ–ª—å', '–¥–æ—Å–º–æ—Ç—Ä'],
        'finance': ['—Ñ–∏–Ω–∞–Ω—Å', '–¥–µ–Ω—å–≥–∏', '–æ–ø–ª–∞—Ç–∞', '—Å—á–µ—Ç'],
        'construction': ['—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø–æ—Å—Ç—Ä–æ–π–∫–∞', '—Ä–µ–º–æ–Ω—Ç'],
        'management': ['—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–Ω–∞—á–∞–ª—å–Ω–∏–∫'],
        'info': ['–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–Ω–æ–≤–æ—Å—Ç–∏', '–æ–±—ä—è–≤–ª–µ–Ω–∏—è'],
        'kitchen': ['–µ–¥–∞', '–≥–æ—Ç–æ–≤–∫–∞', '—Ä–µ—Ü–µ–ø—Ç'],
        'housekeeping': ['—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π', '—Å–Ω–∞–±–∂–µ–Ω–∏–µ'],
        'engineering': ['–ø—Ä–æ–µ–∫—Ç', '—á–µ—Ä—Ç–µ–∂', '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'],
        'sales': ['–∫–ª–∏–µ–Ω—Ç', '–∑–∞–∫–∞–∑', '–¥–æ–≥–æ–≤–æ—Ä', '—Å–¥–µ–ª–∫–∞'],
        'marketing': ['–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '–±—Ä–µ–Ω–¥'],
        'hr': ['–æ—Ç–ø—É—Å–∫', '–±–æ–ª—å–Ω–∏—á–Ω—ã–π', '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ'],
        'legal': ['–¥–æ–∫—É–º–µ–Ω—Ç', '–¥–æ–≥–æ–≤–æ—Ä', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', '–∑–∞–∫–æ–Ω'],
        'it': ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Å–∏—Å—Ç–µ–º–∞', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'],
    }
    
    # –ò—â–µ–º –ø–æ –æ–±—â–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–µ
    for dep_key, keywords in general_keywords.items():
        for keyword in keywords:
            if keyword in text:
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è assistants
                if dep_key == 'assistants' and keyword in ['–ø–æ–º–æ—â—å', '–ø–æ–º–æ—â–Ω–∏–∫']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –¥—Ä—É–≥–∏–µ –æ—Ç–¥–µ–ª—ã
                    if any(other_keyword in text for other_keyword in ['–ø–ª–æ—Ç–Ω–∏–∫', '–≥–æ—Ä–Ω–∏—á–Ω–∞—è', '—Ä–µ—Å–µ–ø—à–µ–Ω', '–æ—Ö—Ä–∞–Ω–∞', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–∫—É—Ö–Ω—è', '–∏–Ω–∂–µ–Ω–µ—Ä', '—Å—Ç—Ä–æ–π–∫–∞', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏']):
                        continue
                return dep_key
    
    return None

def register_voice_handlers(application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª—ã
    load_departments()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message_universal))
    
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
    active_groups = [k for k, v in DEPARTMENTS.items() if v.get('chat_id')]
    inactive_groups = [k for k, v in DEPARTMENTS.items() if not v.get('chat_id')]
    
    logging.info(f"[VOICE] –ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å —á–∞—Ç–∞–º–∏: {active_groups}")
    if inactive_groups:
        logging.info(f"[VOICE] –ì—Ä—É–ø–ø—ã –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏): {inactive_groups}")
