import logging
import urllib.parse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CallbackContext, MessageHandler, CallbackQueryHandler, CommandHandler, filters
from config_veretevo.constants import GENERAL_DIRECTOR_ID
from services_veretevo.gpt_service import gpt_service
from services_veretevo.department_service import DEPARTMENTS
import json

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
gpt_contexts = {}  # {chat_id: {"question": "...", "answer": "...", "department": "..."}}

async def handle_message_in_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç GPT-–ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    
    logging.info(f"[GPT DEBUG] === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò GPT ===")
    logging.info(f"[GPT DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {update.message.chat.id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")
    logging.info(f"[GPT DEBUG] –¢–∏–ø —á–∞—Ç–∞: {update.message.chat.type}")
    logging.info(f"[GPT DEBUG] –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {update.message.chat.title}")
    logging.info(f"[GPT DEBUG] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{update.message.text}'")
    logging.info(f"[GPT DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.message.from_user.first_name} {update.message.from_user.last_name}")
    logging.info(f"[GPT DEBUG] Username: {update.message.from_user.username}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
    if update.message.chat.type not in ['group', 'supergroup']:
        logging.info(f"[GPT DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –≥—Ä—É–ø–ø–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
    if update.message.chat.type not in ['group', 'supergroup']:
        logging.info(f"[GPT DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –≥—Ä—É–ø–ø–∞: {update.message.chat.type}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    if update.message.from_user.is_bot:
        logging.info(f"[GPT DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –¥–∏—Ä–µ–∫—Ç–æ—Ä (–ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π)
    if update.message.from_user.id == GENERAL_DIRECTOR_ID:
        logging.info(f"[GPT DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞")
        return
    
    message_text = update.message.text
    if not message_text or len(message_text.strip()) < 3:
        logging.info(f"[GPT DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ")
        return
    
    logging.info(f"[GPT DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª–µ
    department = get_department_from_chat(update.message.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï —á–∞—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ (–æ—Ç–∫–ª—é—á–∞–µ–º GPT –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞)
    if update.message.chat.id == -1002766433811:  # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã
        logging.info(f"[GPT DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - GPT –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GPT-–ø–æ–¥—Å–∫–∞–∑–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç (–ø—Ä–∏–≤–∞—Ç–Ω–æ)
    try:
        logging.info(f"[GPT DEBUG] –°–æ–∑–¥–∞–µ–º GPT-–ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞")
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å GPT-–ø–æ–¥—Å–∫–∞–∑–∫–æ–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞, —Ç–µ–∫—Å—Ç –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        callback_data = f"gpt_gen:{update.message.message_id}:{update.message.chat.id}"
        logging.info(f"[GPT DEBUG] –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å callback_data: {callback_data}")
        logging.info(f"[GPT DEBUG] Message ID: {update.message.message_id}, Chat ID: {update.message.chat.id}")
        keyboard = [
            [InlineKeyboardButton("üí° GPT-–æ—Ç–≤–µ—Ç", callback_data=callback_data)]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        variants = gpt_service.get_answer_variants(message_text)
        if variants:
            variant_buttons = []
            for variant in variants:
                variant_buttons.append(InlineKeyboardButton(
                    variant["text"], 
                    callback_data=f"gpt_variant:{update.message.message_id}:{update.message.chat.id}:{variant['callback_data']}"
                ))
            keyboard.append(variant_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
        await context.bot.send_message(
            chat_id=GENERAL_DIRECTOR_ID,
            text=f"ü§ñ GPT-–ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏–∑ —á–∞—Ç–∞ {update.message.chat.title}:\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n\n–ß—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å?",
            reply_markup=reply_markup
        )
        
        logging.info(f"[GPT DEBUG] –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GPT-–ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")

async def handle_gpt_generate(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ GPT-–æ—Ç–≤–µ—Ç"""
    
    logging.info(f"[GPT DEBUG] === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò GPT_GENERATE ===")
    logging.info(f"[GPT DEBUG] –ü–æ–ª—É—á–µ–Ω callback: {update.callback_query.data}")
    logging.info(f"[GPT DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.callback_query.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.callback_query.from_user.id != GENERAL_DIRECTOR_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await update.callback_query.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ ID —á–∞—Ç–∞
    data_parts = update.callback_query.data.split(":")
    message_id = int(data_parts[1])
    chat_id = int(data_parts[2])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑–µ)
    original_text = "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    try:
        chat = await context.bot.get_chat(chat_id)
        logging.info(f"[GPT DEBUG] –ü–æ–ª—É—á–µ–Ω —á–∞—Ç: {chat.title}")
    except Exception as e:
        logging.error(f"[GPT DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª
    department = get_department_from_chat(chat_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT
    responses = []
    logging.info(f"[GPT DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —á–∞—Ç–∞ {chat_id}, –æ—Ç–¥–µ–ª: {department}")
    for i in range(3):
        try:
            logging.info(f"[GPT DEBUG] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç {i+1}")
            response_data = await gpt_service.get_smart_response(original_text, department)
            responses.append(response_data['answer'])
            logging.info(f"[GPT DEBUG] –í–∞—Ä–∏–∞–Ω—Ç {i+1} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logging.error(f"[GPT DEBUG] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i+1}: {e}")
            responses.append(f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("1", callback_data=f"gpt_choose:{chat_id}:1")],
        [InlineKeyboardButton("2", callback_data=f"gpt_choose:{chat_id}:2")],
        [InlineKeyboardButton("3", callback_data=f"gpt_choose:{chat_id}:3")],
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data=f"gpt_regenerate:{message_id}:{chat_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    variants_text = f"ü§ñ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞: '{original_text}'\n\n"
    for i, response in enumerate(responses, 1):
        variants_text += f"{i}. {response}\n\n"
    variants_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    await update.callback_query.edit_message_text(
        text=variants_text,
        reply_markup=reply_markup
    )
    
    logging.info(f"[GPT DEBUG] –ü–æ–∫–∞–∑–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}")

async def handle_gpt_variant(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.callback_query.from_user.id != GENERAL_DIRECTOR_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    parts = update.callback_query.data.split(":")
    message_id = int(parts[1])
    chat_id = int(parts[2])
    variant = parts[3]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    try:
        chat = await context.bot.get_chat(chat_id)
        logging.info(f"[GPT DEBUG] –ü–æ–ª—É—á–µ–Ω —á–∞—Ç: {chat.title}")
    except Exception as e:
        logging.error(f"[GPT DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if variant == "gpt_yes":
        answer = "‚úÖ –î–∞, –º–æ–∂–Ω–æ. –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ —Ä–∞–±–æ—Ç–µ."
    elif variant == "gpt_no":
        answer = "‚ùå –ù–µ—Ç, –Ω–µ —Å—Ç–æ–∏—Ç. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
    elif variant == "gpt_now":
        answer = "‚è∞ –°–µ–π—á–∞—Å –∑–∞–π–º—É—Å—å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
    elif variant == "gpt_later":
        answer = "üìÖ –°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ—à—É –ø–æ–∑–∂–µ. –ù–∞–ø–æ–º–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å."
    elif variant == "gpt_think":
        answer = "ü§î –ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –î–∞–π—Ç–µ –º–Ω–µ –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ."
    elif variant == "gpt_urgent_help":
        answer = "üÜò –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Å—Ä–æ—á–Ω–æ. –°–µ–π—á–∞—Å —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –∏ —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—É."
    elif variant == "gpt_contact":
        answer = "üìû –°–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏."
    elif variant == "gpt_analyze":
        answer = "ü§ñ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    else:
        answer = "ü§î –ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º."
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª
    department = get_department_from_chat(chat_id)
    
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–µ–∫—Å—Ç–∞
    original_text = "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if variant == "gpt_yes":
        answer = "‚úÖ –î–∞"
    elif variant == "gpt_no":
        answer = "‚ùå –ù–µ—Ç"
    elif variant == "gpt_analyze":
        # –î–ª—è GPT-–∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        await update.callback_query.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ GPT
        response_data = await gpt_service.get_smart_response(original_text, department)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(
                f"ü§ñ {response_data['answer'][:30]}...", 
                callback_data=f"gpt_send:{chat_id}:{urllib.parse.quote(response_data['answer'])}"
            )],
            [InlineKeyboardButton(
                "üîÑ –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", 
                callback_data=f"gpt_regenerate:{message_id}:{chat_id}"
            )]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
        await context.bot.send_message(
            chat_id=GENERAL_DIRECTOR_ID,
            text=f"ü§ñ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞: '{original_text}'\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π:",
            reply_markup=reply_markup
        )
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        await update.callback_query.edit_message_reply_markup(reply_markup=None)
        
        logging.info(f"[GPT DEBUG] –í–∞—Ä–∏–∞–Ω—Ç—ã GPT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç")
        return
    else:
        answer = "ü§î –ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    gpt_contexts[chat_id] = {
        "question": original_text,
        "answer": answer,
        "department": department,
        "type": "variant"
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    answer_text = f"üì£ –û—Ç–≤–µ—Ç –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:\n\n{answer}"
    
    keyboard = [
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω", callback_data="gpt_save_template")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=answer_text,
        reply_markup=reply_markup
    )
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏)
    await update.callback_query.edit_message_reply_markup(reply_markup=None)
    
    logging.info(f"[GPT DEBUG] –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

async def handle_save_template(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ —à–∞–±–ª–æ–Ω–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.callback_query.from_user.id != GENERAL_DIRECTOR_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    chat_id = update.callback_query.message.chat.id
    
    if chat_id not in gpt_contexts:
        await update.callback_query.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    context_data = gpt_contexts[chat_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    success = gpt_service.save_answer_template(
        context_data["question"],
        context_data["answer"],
        context_data["department"]
    )
    
    if success:
        await update.callback_query.answer("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_text = update.callback_query.message.text
        new_text = current_text + "\n\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"
        
        await update.callback_query.edit_message_text(
            text=new_text,
            reply_markup=None
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        del gpt_contexts[chat_id]
    else:
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)

async def handle_gpt_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.message.from_user.id != GENERAL_DIRECTOR_ID:
        return
    
    stats = gpt_service.get_cache_stats()
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π GPT:

üìù –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_answers']}
üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats['file_size']} –±–∞–π—Ç
üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {stats['last_save']}
    """
    
    await update.message.reply_text(stats_text)

def get_department_from_chat(chat_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ç–¥–µ–ª –ø–æ ID —á–∞—Ç–∞"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª –ø–æ ID —á–∞—Ç–∞
    if chat_id == -1002766433811:  # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã
        return "assistants"
    elif chat_id == -1002874667453:  # –ü–ª–æ—Ç–Ω–∏–∫–∏
        return "carpenters"
    elif chat_id == -1002295933154:  # –û—Ö—Ä–∞–Ω–∞
        return "security"
    elif chat_id == -1002844492561:  # –§–∏–Ω–∞–Ω—Å—ã
        return "finance"
    elif chat_id == -1002634456712:  # –°—Ç—Ä–æ–π–∫–∞
        return "construction"
    elif chat_id == -1002588088668:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏
        return "management"
    elif chat_id == -4883128031:  # –ò–Ω—Ñ–æ
        return "info"
    else:
        return ""

def register_gpt_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ GPT-–ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    
    # GPT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(
        MessageHandler(
            (filters.ChatType.GROUPS | filters.ChatType.SUPERGROUP) & filters.TEXT & ~filters.COMMAND,
            handle_message_in_group
        )
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(
        CallbackQueryHandler(handle_gpt_generate, pattern="^gpt_gen:")
    )
    
    application.add_handler(
        CallbackQueryHandler(handle_gpt_variant, pattern="^gpt_variant:")
    )
    
    application.add_handler(
        CallbackQueryHandler(handle_gpt_send, pattern="^gpt_send:")
    )
    
    application.add_handler(
        CallbackQueryHandler(handle_gpt_quick, pattern="^gpt_quick:")
    )
    
    application.add_handler(
        CallbackQueryHandler(handle_gpt_regenerate, pattern="^gpt_regenerate:")
    )
    
    application.add_handler(
        CallbackQueryHandler(handle_gpt_choose, pattern="^gpt_choose:")
    )
    
    application.add_handler(
        CallbackQueryHandler(handle_save_template, pattern="^gpt_save_template$")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    application.add_handler(
        CommandHandler("gpt_stats", handle_gpt_stats)
    )
    
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ GPT-–ø–æ–¥—Å–∫–∞–∑–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

async def handle_gpt_send(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π GPT –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.callback_query.from_user.id != GENERAL_DIRECTOR_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await update.callback_query.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_parts = update.callback_query.data.split(":")
    chat_id = int(data_parts[1])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑–µ)
    answer = "ü§ñ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω GPT"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    answer_text = f"üì£ –û—Ç–≤–µ—Ç –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:\n\n{answer}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω", callback_data="gpt_save_template")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=answer_text,
        reply_markup=reply_markup
    )
    
    # –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    await update.callback_query.edit_message_reply_markup(reply_markup=None)
    
    logging.info(f"[GPT DEBUG] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

async def handle_gpt_quick(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.callback_query.from_user.id != GENERAL_DIRECTOR_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await update.callback_query.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_parts = update.callback_query.data.split(":")
    chat_id = int(data_parts[1])
    variant = data_parts[2]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if variant == "gpt_yes":
        answer = "‚úÖ –î–∞"
    elif variant == "gpt_no":
        answer = "‚ùå –ù–µ—Ç"
    elif variant == "gpt_analyze":
        # –î–ª—è GPT-–∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        await update.callback_query.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª
        department = get_department_from_chat(chat_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ GPT
        response_data = await gpt_service.get_smart_response("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞", department)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(
                f"ü§ñ {response_data['answer'][:30]}...", 
                callback_data=f"gpt_send:{chat_id}:gpt_response"
            )],
            [InlineKeyboardButton(
                "üîÑ –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", 
                callback_data=f"gpt_regenerate:0:{chat_id}"
            )]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
        await context.bot.send_message(
            chat_id=GENERAL_DIRECTOR_ID,
            text=f"ü§ñ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π:",
            reply_markup=reply_markup
        )
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        await update.callback_query.edit_message_reply_markup(reply_markup=None)
        
        logging.info(f"[GPT DEBUG] –í–∞—Ä–∏–∞–Ω—Ç—ã GPT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç")
        return
    else:
        answer = "ü§î –ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    answer_text = f"üì£ –û—Ç–≤–µ—Ç –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:\n\n{answer}"
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=answer_text
    )
    
    # –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    await update.callback_query.edit_message_reply_markup(reply_markup=None)
    
    logging.info(f"[GPT DEBUG] –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

async def handle_gpt_regenerate(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.callback_query.from_user.id != GENERAL_DIRECTOR_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await update.callback_query.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_parts = update.callback_query.data.split(":")
    message_id = int(data_parts[1])
    chat_id = int(data_parts[2])
    original_text = "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª
    department = get_department_from_chat(chat_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    responses = []
    logging.info(f"[GPT DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —á–∞—Ç–∞ {chat_id}, –æ—Ç–¥–µ–ª: {department}")
    for i in range(3):
        try:
            logging.info(f"[GPT DEBUG] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç {i+1}")
            response_data = await gpt_service.get_smart_response(original_text, department)
            responses.append(response_data['answer'])
            logging.info(f"[GPT DEBUG] –í–∞—Ä–∏–∞–Ω—Ç {i+1} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logging.error(f"[GPT DEBUG] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i+1}: {e}")
            responses.append(f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("1", callback_data=f"gpt_choose:{chat_id}:1")],
        [InlineKeyboardButton("2", callback_data=f"gpt_choose:{chat_id}:2")],
        [InlineKeyboardButton("3", callback_data=f"gpt_choose:{chat_id}:3")],
        [InlineKeyboardButton("üîÑ –ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data=f"gpt_regenerate:{message_id}:{chat_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    variants_text = f"ü§ñ –ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞: '{original_text}'\n\n"
    for i, response in enumerate(responses, 1):
        variants_text += f"{i}. {response}\n\n"
    variants_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    
    await update.callback_query.edit_message_text(
        text=variants_text,
        reply_markup=reply_markup
    )
    
    logging.info(f"[GPT DEBUG] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}")

async def handle_gpt_choose(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ü–∏—Ñ—Ä–µ"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if update.callback_query.from_user.id != GENERAL_DIRECTOR_ID:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await update.callback_query.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_parts = update.callback_query.data.split(":")
    chat_id = int(data_parts[1])
    choice = int(data_parts[2])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    answer = f"ü§ñ –í–∞—Ä–∏–∞–Ω—Ç {choice}: –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω GPT"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    answer_text = f"üì£ –û—Ç–≤–µ—Ç –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:\n\n{answer}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω", callback_data="gpt_save_template")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=answer_text,
        reply_markup=reply_markup
    )
    
    # –£–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    await update.callback_query.edit_message_reply_markup(reply_markup=None)
    
    logging.info(f"[GPT DEBUG] –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")