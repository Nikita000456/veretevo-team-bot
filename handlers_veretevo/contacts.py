#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, –°—Ç—Ä–æ–π–∫–∞
"""

import logging
import json
import os
from datetime import datetime
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters, Application, ConversationHandler
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from utils_veretevo.keyboards import (
    contacts_menu_keyboard, 
    contact_categories_keyboard, 
    contact_actions_keyboard,
    contact_creation_keyboard,
    main_menu_keyboard
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –æ—Ç–¥–µ–ª–æ–≤
from services_veretevo.department_service import DEPARTMENTS

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º knowledge_collector –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
import sys
sys.path.append('/home/ubuntu/bots/shared')
from ai_service.knowledge_collector import KnowledgeCollector

logger = logging.getLogger(__name__)

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
ALLOWED_DEPARTMENTS = ['–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏', '–°—Ç—Ä–æ–π–∫–∞']

# ID —á–∞—Ç–∞ "–í–µ—Ä–µ—Ç–µ–≤–æ –ò–Ω—Ñ–æ" –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
VERETEVO_INFO_CHAT_ID = None  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    CONTACTS_MENU,
    ADDING_CONTACT_NAME,
    ADDING_CONTACT_PHONE,
    ADDING_CONTACT_EMAIL,
    ADDING_CONTACT_ADDRESS,
    ADDING_CONTACT_WEBSITE,
    ADDING_CONTACT_DESCRIPTION,
    ADDING_CONTACT_CATEGORY,
    EDITING_CONTACT,
    SEARCHING_CONTACT
) = range(10)

class ContactsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º"""
    
    def __init__(self):
        self.knowledge_collector = KnowledgeCollector()
        self.veretevo_info_chat_id = self._get_veretevo_info_chat_id()
    
    def _get_veretevo_info_chat_id(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ –í–µ—Ä–µ—Ç–µ–≤–æ –ò–Ω—Ñ–æ"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞ –í–µ—Ä–µ—Ç–µ–≤–æ –ò–Ω—Ñ–æ: {e}")
            return None
    
    def _check_user_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            if not user_id:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–∏—Ö –æ—Ç–¥–µ–ª–∞—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_departments = []
            for dept_name, dept_data in DEPARTMENTS.items():
                if str(user_id) in dept_data.get('members', []):
                    user_departments.append(dept_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –æ—Ç–¥–µ–ª–∞–º–∏
            for dept in user_departments:
                if dept in ALLOWED_DEPARTMENTS:
                    return True
            
            logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º. –û—Ç–¥–µ–ª—ã: {user_departments}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def _send_notification_to_veretevo_info(self, message: str, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –í–µ—Ä–µ—Ç–µ–≤–æ –ò–Ω—Ñ–æ"""
        try:
            if not self.veretevo_info_chat_id:
                logger.warning("‚ö†Ô∏è ID —á–∞—Ç–∞ –í–µ—Ä–µ—Ç–µ–≤–æ –ò–Ω—Ñ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            
            await context.bot.send_message(
                chat_id=self.veretevo_info_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –í–µ—Ä–µ—Ç–µ–≤–æ –ò–Ω—Ñ–æ: {message[:50]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –í–µ—Ä–µ—Ç–µ–≤–æ –ò–Ω—Ñ–æ: {e}")
    
    async def contacts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /contacts"""
        try:
            user_id = update.effective_user.id
            chat_type = update.effective_chat.type
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
            if chat_type != "private":
                await update.message.reply_text(
                    "‚ùå –ö–æ–º–∞–Ω–¥—ã –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º!",
                    reply_markup=main_menu_keyboard("private", user_id)
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not self._check_user_access(user_id):
                await update.message.reply_text(
                    "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
                    "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, –°—Ç—Ä–æ–π–∫–∞.",
                    reply_markup=main_menu_keyboard("private", user_id)
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            await update.message.reply_text(
                "üìû <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê–ú–ò</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=contacts_menu_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /contacts: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    
    async def contacts_button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'"""
        try:
            user_id = update.effective_user.id
            chat_type = update.effective_chat.type
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
            if chat_type != "private":
                await update.message.reply_text(
                    "‚ùå –§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º!"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not self._check_user_access(user_id):
                await update.message.reply_text(
                    "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
                    "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, –°—Ç—Ä–æ–π–∫–∞."
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            await update.message.reply_text(
                "üìû <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê–ú–ò</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=contacts_menu_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    
    async def contacts_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            callback_data = query.data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not self._check_user_access(user_id):
                await query.edit_message_text(
                    "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
                    "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, –°—Ç—Ä–æ–π–∫–∞."
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback'–∏
            if callback_data == "contacts_find":
                await self._handle_find_contact(query, context)
            elif callback_data == "contacts_add":
                await self._handle_add_contact(query, context)
            elif callback_data == "contacts_list":
                await self._handle_list_contacts(query, context)
            elif callback_data == "contacts_categories":
                await self._handle_show_categories(query, context)
            elif callback_data == "contacts_export":
                await self._handle_export_contacts(query, context)
            elif callback_data == "contacts_main_menu":
                await self._handle_main_menu(query, context)
            elif callback_data.startswith("category_"):
                await self._handle_category_selection(query, context, callback_data)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
            except:
                pass
    
    async def _handle_find_contact(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        await query.edit_message_text(
            "üîç <b>–ü–û–ò–°–ö –ö–û–ù–¢–ê–ö–¢–ê</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            parse_mode=ParseMode.HTML
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∏—Å–∫–∞
        return SEARCHING_CONTACT
    
    async def _handle_add_contact(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        context.user_data['contact_creation'] = {
            'name': '',
            'phone': '',
            'email': '',
            'address': '',
            'website': '',
            'description': '',
            'category': 'supplier'
        }
        
        await query.edit_message_text(
            "‚ûï <b>–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
            parse_mode=ParseMode.HTML
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        return ADDING_CONTACT_NAME
    
    async def _handle_list_contacts(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            all_contacts = []
            for phone, data in self.knowledge_collector.suppliers_database.items():
                all_contacts.append({
                    'phone': phone,
                    'name': data.get('name', 'Unknown'),
                    'category': data.get('category', 'supplier'),
                    'email': data.get('email', ''),
                    'internet_enriched': data.get('internet_enriched', 'false')
                })
            
            if not all_contacts:
                await query.edit_message_text(
                    "üìã <b>–°–ü–ò–°–û–ö –ö–û–ù–¢–ê–ö–¢–û–í</b>\n\n"
                    "‚ÑπÔ∏è –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç!",
                    reply_markup=contacts_menu_keyboard(),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            contacts_text = "üìã <b>–°–ü–ò–°–û–ö –ö–û–ù–¢–ê–ö–¢–û–í</b>\n\n"
            for i, contact in enumerate(all_contacts[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                enriched_icon = "üåê" if contact['internet_enriched'] == 'true' else "üìû"
                contacts_text += f"{i}. {enriched_icon} <b>{contact['name']}</b>\n"
                contacts_text += f"   üì± {contact['phone']}\n"
                contacts_text += f"   üè∑Ô∏è {contact['category']}\n"
                if contact['email']:
                    contacts_text += f"   üìß {contact['email']}\n"
                contacts_text += "\n"
            
            if len(all_contacts) > 20:
                contacts_text += f"... –∏ –µ—â–µ {len(all_contacts) - 20} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n\n"
            
            contacts_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            
            await query.edit_message_text(
                contacts_text,
                reply_markup=contacts_menu_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    
    async def _handle_show_categories(self, query, context):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        await query.edit_message_text(
            "üè∑Ô∏è <b>–ö–ê–¢–ï–ì–û–†–ò–ò –ö–û–ù–¢–ê–ö–¢–û–í</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=contact_categories_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_export_contacts(self, query, context):
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            all_contacts = []
            for phone, data in self.knowledge_collector.suppliers_database.items():
                all_contacts.append({
                    'phone': phone,
                    'name': data.get('name', 'Unknown'),
                    'email': data.get('email', ''),
                    'address': data.get('address', ''),
                    'website': data.get('website', ''),
                    'description': data.get('description', ''),
                    'category': data.get('category', 'supplier'),
                    'tags': data.get('tags', []),
                    'first_added': data.get('first_added', ''),
                    'last_updated': data.get('last_updated', ''),
                    'internet_enriched': data.get('internet_enriched', 'false')
                })
            
            if not all_contacts:
                await query.edit_message_text(
                    "üì§ <b>–≠–ö–°–ü–û–†–¢ –ö–û–ù–¢–ê–ö–¢–û–í</b>\n\n"
                    "‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                    reply_markup=contacts_menu_keyboard(),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            export_text = "üì§ <b>–≠–ö–°–ü–û–†–¢ –ö–û–ù–¢–ê–ö–¢–û–í</b>\n\n"
            export_text += f"–í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(all_contacts)}\n"
            export_text += f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {context.bot.get_me().first_name}\n\n"
            
            for contact in all_contacts:
                export_text += f"üè¢ <b>{contact['name']}</b>\n"
                export_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact['phone']}\n"
                if contact['email']:
                    export_text += f"üìß Email: {contact['email']}\n"
                if contact['address']:
                    export_text += f"üè† –ê–¥—Ä–µ—Å: {contact['address']}\n"
                if contact['website']:
                    export_text += f"üåê –°–∞–π—Ç: {contact['website']}\n"
                if contact['description']:
                    export_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {contact['description']}\n"
                export_text += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {contact['category']}\n"
                export_text += f"üåê –û–±–æ–≥–∞—â–µ–Ω: {'–î–∞' if contact['internet_enriched'] == 'true' else '–ù–µ—Ç'}\n"
                export_text += "‚îÄ" * 30 + "\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(export_text) > 4000:
                parts = [export_text[i:i+4000] for i in range(0, len(export_text), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await query.edit_message_text(part, parse_mode=ParseMode.HTML)
                    else:
                        await context.bot.send_message(
                            chat_id=query.from_user.id,
                            text=part,
                            parse_mode=ParseMode.HTML
                        )
            else:
                await query.edit_message_text(
                    export_text,
                    reply_markup=contacts_menu_keyboard(),
                    parse_mode=ParseMode.HTML
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    
    async def _handle_main_menu(self, query, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard("private", query.from_user.id)
        )
    
    async def _handle_category_selection(self, query, context, callback_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            category = callback_data.replace("category_", "")
            category_names = {
                'supplier': '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏',
                'contractor': '–ü–æ–¥—Ä—è–¥—á–∏–∫–∏', 
                'employee': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            contacts = self.knowledge_collector.get_contacts_by_category(category)
            
            if not contacts:
                await query.edit_message_text(
                    f"üè∑Ô∏è <b>–ö–ê–¢–ï–ì–û–†–ò–Ø: {category_names.get(category, category)}</b>\n\n"
                    f"‚ÑπÔ∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
                    reply_markup=contact_categories_keyboard(),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            contacts_text = f"üè∑Ô∏è <b>–ö–ê–¢–ï–ì–û–†–ò–Ø: {category_names.get(category, category)}</b>\n\n"
            contacts_text += f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}\n\n"
            
            for i, contact in enumerate(contacts[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                enriched_icon = "üåê" if contact['internet_enriched'] == 'true' else "üìû"
                contacts_text += f"{i}. {enriched_icon} <b>{contact['name']}</b>\n"
                contacts_text += f"   üì± {contact['phone']}\n"
                if contact['email']:
                    contacts_text += f"   üìß {contact['email']}\n"
                contacts_text += "\n"
            
            if len(contacts) > 15:
                contacts_text += f"... –∏ –µ—â–µ {len(contacts) - 15} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n\n"
            
            await query.edit_message_text(
                contacts_text,
                reply_markup=contact_categories_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    async def handle_contact_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            name = update.message.text.strip()
            if not name or len(name) < 2:
                await update.message.reply_text(
                    "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return ADDING_CONTACT_NAME
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
            context.user_data['contact_creation']['name'] = name
            
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=contact_creation_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
            return ADDING_CONTACT_PHONE
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_contact_phone_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            phone = update.message.text.strip()
            
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            import re
            phone_pattern = r'(\+?[78]\s?\(?\d{3}\)?\s?\d{3}[-_]?\d{2}[-_]?\d{2})'
            if not re.match(phone_pattern, phone):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "+7 (999) 123-45-67 –∏–ª–∏ 8 (999) 123-45-67\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return ADDING_CONTACT_PHONE
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            context.user_data['contact_creation']['phone'] = phone
            
            await update.message.reply_text(
                f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ email (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=contact_creation_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
            return ADDING_CONTACT_EMAIL
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_contact_email_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            email = update.message.text.strip()
            
            if email == '-':
                email = ''
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
                import re
                email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                if not re.match(email_pattern, email):
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
                    )
                    return ADDING_CONTACT_EMAIL
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
            context.user_data['contact_creation']['email'] = email
            
            await update.message.reply_text(
                f"‚úÖ Email: <b>{email if email else '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=contact_creation_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
            return ADDING_CONTACT_ADDRESS
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_contact_address_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            address = update.message.text.strip()
            
            if address == '-':
                address = ''
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
            context.user_data['contact_creation']['address'] = address
            
            await update.message.reply_text(
                f"‚úÖ –ê–¥—Ä–µ—Å: <b>{address if address else '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–µ–±-—Å–∞–π—Ç (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=contact_creation_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
            return ADDING_CONTACT_WEBSITE
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_contact_website_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ–±-—Å–∞–π—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            website = update.message.text.strip()
            
            if website == '-':
                website = ''
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ–±-—Å–∞–π—Ç–∞
                if not website.startswith(('http://', 'https://', 'www.')):
                    website = 'www.' + website
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–±-—Å–∞–π—Ç
            context.user_data['contact_creation']['website'] = website
            
            await update.message.reply_text(
                f"‚úÖ –í–µ–±-—Å–∞–π—Ç: <b>{website if website else '–Ω–µ —É–∫–∞–∑–∞–Ω'}</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=contact_creation_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
            return ADDING_CONTACT_DESCRIPTION
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Å–∞–π—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_contact_description_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            description = update.message.text.strip()
            
            if description == '-':
                description = ''
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            context.user_data['contact_creation']['description'] = description
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await update.message.reply_text(
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{description if description else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
                reply_markup=contact_categories_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
            return ADDING_CONTACT_CATEGORY
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_contact_category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data.startswith("category_"):
                category = query.data.replace("category_", "")
                context.user_data['contact_creation']['category'] = category
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                contact_data = context.user_data['contact_creation']
                contact_data['type'] = category
                contact_data['tags'] = []
                contact_data['internet_enriched'] = 'false'
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                if self.knowledge_collector.save_supplier_contact(contact_data):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –í–µ—Ä–µ—Ç–µ–≤–æ –ò–Ω—Ñ–æ
                    notification_text = (
                        f"üìû <b>–ù–û–í–´–ô –ö–û–ù–¢–ê–ö–¢ –î–û–ë–ê–í–õ–ï–ù</b>\n\n"
                        f"üè¢ <b>{contact_data['name']}</b>\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact_data['phone']}\n"
                        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                        f"üë§ –î–æ–±–∞–≤–∏–ª: {update.effective_user.first_name}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m %H:%M')}"
                    )
                    
                    await self._send_notification_to_veretevo_info(notification_text, context)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await query.edit_message_text(
                        f"‚úÖ <b>–ö–û–ù–¢–ê–ö–¢ –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
                        f"üè¢ <b>{contact_data['name']}</b>\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact_data['phone']}\n"
                        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                        f"üìß Email: {contact_data['email'] if contact_data['email'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üè† –ê–¥—Ä–µ—Å: {contact_data['address'] if contact_data['address'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üåê –°–∞–π—Ç: {contact_data['website'] if contact_data['website'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {contact_data['description'] if contact_data['description'] else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                        f"–ö–æ–Ω—Ç–∞–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!",
                        reply_markup=contacts_menu_keyboard(),
                        parse_mode=ParseMode.HTML
                    )
                    
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
                    context.user_data.pop('contact_creation', None)
                    
                    return CONTACTS_MENU
                else:
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=contacts_menu_keyboard()
                    )
                    return CONTACTS_MENU
            
            return ADDING_CONTACT_CATEGORY
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_contact_search_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            search_query = update.message.text.strip()
            
            if not search_query or len(search_query) < 2:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return SEARCHING_CONTACT
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = self.knowledge_collector.search_contacts_advanced(search_query)
            
            if not results:
                await update.message.reply_text(
                    f"üîç <b>–ü–û–ò–°–ö: '{search_query}'</b>\n\n"
                    f"‚ÑπÔ∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                    f"‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    reply_markup=contacts_menu_keyboard(),
                    parse_mode=ParseMode.HTML
                )
                return CONTACTS_MENU
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            search_text = f"üîç <b>–ü–û–ò–°–ö: '{search_query}'</b>\n\n"
            search_text += f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(results)}\n\n"
            
            for i, contact in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                enriched_icon = "üåê" if contact['internet_enriched'] == 'true' else "üìû"
                search_text += f"{i}. {enriched_icon} <b>{contact['name']}</b>\n"
                search_text += f"   üì± {contact['phone']}\n"
                search_text += f"   üè∑Ô∏è {contact['category']}\n"
                if contact['email']:
                    search_text += f"   üìß {contact['email']}\n"
                search_text += "\n"
            
            if len(results) > 10:
                search_text += f"... –∏ –µ—â–µ {len(results) - 10} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n\n"
            
            search_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            
            await update.message.reply_text(
                search_text,
                reply_markup=contacts_menu_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
            return CONTACTS_MENU
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def cancel_contact_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ /cancel"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
            context.user_data.pop('contact_creation', None)
            
            await update.message.reply_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:",
                reply_markup=contacts_menu_keyboard()
            )
            
            return CONTACTS_MENU
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return ConversationHandler.END

    async def handle_contact_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            query = update.callback_query
            await query.answer()
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
            context.user_data.pop('contact_creation', None)
            
            await query.edit_message_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:",
                reply_markup=contacts_menu_keyboard()
            )
            
            return CONTACTS_MENU
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return ConversationHandler.END


def register_contacts_handlers(application: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º"""
    contacts_handler = ContactsHandler()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    contacts_conversation = ConversationHandler(
        entry_points=[
            CommandHandler("contacts", contacts_handler.contacts_command),
            MessageHandler(filters.Regex("^üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã$"), contacts_handler.contacts_button_handler),
            CallbackQueryHandler(contacts_handler.contacts_callback_handler)
        ],
        states={
            ADDING_CONTACT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_name_input)
            ],
            ADDING_CONTACT_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_phone_input)
            ],
            ADDING_CONTACT_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_email_input)
            ],
            ADDING_CONTACT_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_address_input)
            ],
            ADDING_CONTACT_WEBSITE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_website_input)
            ],
            ADDING_CONTACT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_description_input)
            ],
            ADDING_CONTACT_CATEGORY: [
                CallbackQueryHandler(contacts_handler.handle_contact_category_selection)
            ],
            SEARCHING_CONTACT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_search_input)
            ],
            CONTACTS_MENU: [
                CallbackQueryHandler(contacts_handler.contacts_callback_handler)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", contacts_handler.cancel_contact_operation),
            CallbackQueryHandler(contacts_handler.handle_contact_cancel, pattern="^contact_cancel$")
        ]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler
    application.add_handler(contacts_conversation)
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å ConversationHandler")
