#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç OpenAI
"""

import logging
import json
import os
from datetime import datetime
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters, Application, ConversationHandler
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from utils_veretevo.keyboards import (
    contacts_menu_keyboard, 
    contact_categories_keyboard, 
    contact_actions_keyboard,
    contact_creation_keyboard,
    main_menu_keyboard
)

logger = logging.getLogger(__name__)

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
ALLOWED_DEPARTMENTS = ['–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏', '–°—Ç—Ä–æ–π–∫–∞']

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    CONTACTS_MENU,
    ADDING_CONTACT_NAME,
    ADDING_CONTACT_PHONE,
    ADDING_CONTACT_EMAIL,
    ADDING_CONTACT_ADDRESS,
    ADDING_CONTACT_WEBSITE,
    ADDING_CONTACT_DESCRIPTION,
    ADDING_CONTACT_CATEGORY,
    EDITING_CONTACT,
    SEARCHING_CONTACT
) = range(10)

class MockKnowledgeCollector:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è KnowledgeCollector –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.suppliers_database = {}
        self.suppliers_file = "data/suppliers_database.json"
    
    def save_supplier_contact(self, contact_data):
        """–ó–∞–≥–ª—É—à–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        logger.info(f"üìû –ú–æ–∫: –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç {contact_data.get('name', 'Unknown')}")
        return True
    
    def get_contacts_by_category(self, category):
        """–ó–∞–≥–ª—É—à–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return []
    
    def search_contacts_advanced(self, query):
        """–ó–∞–≥–ª—É—à–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        return []

class ContactsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ KnowledgeCollector
        self.knowledge_collector = MockKnowledgeCollector()
        self.veretevo_info_chat_id = None
    
    def _check_user_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            if not user_id:
                return False
            
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
            logger.info(f"üîì –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def _send_notification_to_veretevo_info(self, message: str, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –í–µ—Ä–µ—Ç–µ–≤–æ –ò–Ω—Ñ–æ"""
        try:
            logger.info(f"üì¢ –ú–æ–∫: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def contacts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /contacts"""
        try:
            user_id = update.effective_user.id
            chat_type = update.effective_chat.type
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
            if chat_type != "private":
                await update.message.reply_text(
                    "‚ùå –ö–æ–º–∞–Ω–¥—ã –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º!",
                    reply_markup=main_menu_keyboard("private", user_id)
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not self._check_user_access(user_id):
                await update.message.reply_text(
                    "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
                    "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, –°—Ç—Ä–æ–π–∫–∞.",
                    reply_markup=main_menu_keyboard("private", user_id)
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            await update.message.reply_text(
                "üìû <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê–ú–ò</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=contacts_menu_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /contacts: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    
    async def contacts_button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'"""
        try:
            user_id = update.effective_user.id
            chat_type = update.effective_chat.type
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
            if chat_type != "private":
                await update.message.reply_text(
                    "‚ùå –§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º!"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not self._check_user_access(user_id):
                await update.message.reply_text(
                    "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
                    "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, –°—Ç—Ä–æ–π–∫–∞."
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            await update.message.reply_text(
                "üìû <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê–ú–ò</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=contacts_menu_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    
    async def contacts_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            callback_data = query.data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not self._check_user_access(user_id):
                await query.edit_message_text(
                    "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
                    "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, –°—Ç—Ä–æ–π–∫–∞."
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback'–∏
            if callback_data == "contacts_find":
                await self._handle_find_contact(query, context)
            elif callback_data == "contacts_add":
                await self._handle_add_contact(query, context)
            elif callback_data == "contacts_list":
                await self._handle_list_contacts(query, context)
            elif callback_data == "contacts_categories":
                await self._handle_show_categories(query, context)
            elif callback_data == "contacts_export":
                await self._handle_export_contacts(query, context)
            elif callback_data == "contacts_main_menu":
                await self._handle_main_menu(query, context)
            elif callback_data.startswith("category_"):
                await self._handle_category_selection(query, context, callback_data)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
            except:
                pass
    
    async def _handle_find_contact(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        await query.edit_message_text(
            "üîç <b>–ü–û–ò–°–ö –ö–û–ù–¢–ê–ö–¢–ê</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            parse_mode=ParseMode.HTML
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∏—Å–∫–∞
        return SEARCHING_CONTACT
    
    async def _handle_add_contact(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        context.user_data['contact_creation'] = {
            'name': '',
            'phone': '',
            'email': '',
            'address': '',
            'website': '',
            'description': '',
            'category': 'supplier'
        }
        
        await query.edit_message_text(
            "‚ûï <b>–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
            parse_mode=ParseMode.HTML
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        return ADDING_CONTACT_NAME
    
    async def _handle_list_contacts(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        await query.edit_message_text(
            "üìã <b>–°–ü–ò–°–û–ö –ö–û–ù–¢–ê–ö–¢–û–í</b>\n\n"
            "‚ÑπÔ∏è –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç!",
            reply_markup=contacts_menu_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_show_categories(self, query, context):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        await query.edit_message_text(
            "üè∑Ô∏è <b>–ö–ê–¢–ï–ì–û–†–ò–ò –ö–û–ù–¢–ê–ö–¢–û–í</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=contact_categories_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_export_contacts(self, query, context):
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        await query.edit_message_text(
            "üì§ <b>–≠–ö–°–ü–û–†–¢ –ö–û–ù–¢–ê–ö–¢–û–í</b>\n\n"
            "‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
            reply_markup=contacts_menu_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_main_menu(self, query, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard("private", query.from_user.id)
        )
    
    async def _handle_category_selection(self, query, context, callback_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category = callback_data.replace("category_", "")
        category_names = {
            'supplier': '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏',
            'contractor': '–ü–æ–¥—Ä—è–¥—á–∏–∫–∏', 
            'employee': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'
        }
        
        await query.edit_message_text(
            f"üè∑Ô∏è <b>–ö–ê–¢–ï–ì–û–†–ò–Ø: {category_names.get(category, category)}</b>\n\n"
            f"‚ÑπÔ∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
            reply_markup=contact_categories_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è ConversationHandler
    async def handle_contact_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            name = update.message.text.strip()
            if len(name) < 2:
                await update.message.reply_text(
                    "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=contact_creation_keyboard()
                )
                return ADDING_CONTACT_NAME
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            context.user_data['contact_creation']['name'] = name
            
            await update.message.reply_text(
                "üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=contact_creation_keyboard()
            )
            return ADDING_CONTACT_PHONE
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    async def handle_contact_phone_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            phone = update.message.text.strip()
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if not (phone.startswith('+7') or phone.startswith('8')) or len(phone) < 10:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7 (999) 123-45-67 –∏–ª–∏ 8 (999) 123-45-67. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=contact_creation_keyboard()
                )
                return ADDING_CONTACT_PHONE
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            context.user_data['contact_creation']['phone'] = phone
            
            await update.message.reply_text(
                "üìß –í–≤–µ–¥–∏—Ç–µ email (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=contact_creation_keyboard()
            )
            return ADDING_CONTACT_EMAIL
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    async def handle_contact_email_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            email = update.message.text.strip()
            if email == '-':
                email = ''
            elif '@' not in email:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
                    reply_markup=contact_creation_keyboard()
                )
                return ADDING_CONTACT_EMAIL
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
            context.user_data['contact_creation']['email'] = email
            
            await update.message.reply_text(
                "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=contact_creation_keyboard()
            )
            return ADDING_CONTACT_ADDRESS
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    async def handle_contact_address_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            address = update.message.text.strip()
            if address == '-':
                address = ''
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
            context.user_data['contact_creation']['address'] = address
            
            await update.message.reply_text(
                "üåê –í–≤–µ–¥–∏—Ç–µ –≤–µ–±-—Å–∞–π—Ç (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=contact_creation_keyboard()
            )
            return ADDING_CONTACT_WEBSITE
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    async def handle_contact_website_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ–±-—Å–∞–π—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            website = update.message.text.strip()
            if website == '-':
                website = ''
            elif website and not website.startswith(('http://', 'https://', 'www.')):
                website = 'www.' + website
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–±-—Å–∞–π—Ç
            context.user_data['contact_creation']['website'] = website
            
            await update.message.reply_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=contact_creation_keyboard()
            )
            return ADDING_CONTACT_DESCRIPTION
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Å–∞–π—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    async def handle_contact_description_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            description = update.message.text.strip()
            if description == '-':
                description = ''
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            context.user_data['contact_creation']['description'] = description
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await update.message.reply_text(
                "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
                reply_markup=contact_categories_keyboard()
            )
            return ADDING_CONTACT_CATEGORY
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    async def handle_contact_category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data.startswith('category_'):
                category = query.data.replace('category_', '')
                context.user_data['contact_creation']['category'] = category
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                contact_data = context.user_data['contact_creation']
                success = self.knowledge_collector.save_supplier_contact(contact_data)
                
                if success:
                    await query.edit_message_text(
                        f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {contact_data['name']}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact_data['phone']}\n"
                        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
                        reply_markup=contacts_menu_keyboard()
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    notification = f"üìû –ù–û–í–´–ô –ö–û–ù–¢–ê–ö–¢ –î–û–ë–ê–í–õ–ï–ù\n\nüè¢ {contact_data['name']}\nüì± {contact_data['phone']}\nüè∑Ô∏è {category}"
                    await self._send_notification_to_veretevo_info(notification, context)
                    
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    context.user_data.pop('contact_creation', None)
                    return ConversationHandler.END
                else:
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=contacts_menu_keyboard()
                    )
                    return ConversationHandler.END
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=contact_categories_keyboard()
                )
                return ADDING_CONTACT_CATEGORY
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    async def handle_contact_search_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            query_text = update.message.text.strip()
            if len(query_text) < 2:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=contacts_menu_keyboard()
                )
                return SEARCHING_CONTACT
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            results = self.knowledge_collector.search_contacts_advanced(query_text)
            
            if results:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                result_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query_text}':\n\n"
                for i, contact in enumerate(results[:10], 1):
                    result_text += f"{i}. {contact.get('name', 'N/A')}\n"
                    result_text += f"   üì± {contact.get('phone', 'N/A')}\n"
                    result_text += f"   üìß {contact.get('email', 'N/A')}\n"
                    result_text += f"   üè∑Ô∏è {contact.get('category', 'N/A')}\n\n"
                
                await update.message.reply_text(
                    result_text,
                    reply_markup=contacts_menu_keyboard()
                )
            else:
                await update.message.reply_text(
                    f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query_text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.",
                    reply_markup=contacts_menu_keyboard()
                )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    async def cancel_contact_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('contact_creation', None)
            
            await update.message.reply_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=contacts_menu_keyboard()
            )
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return ConversationHandler.END
    
    async def handle_contact_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
        try:
            query = update.callback_query
            await query.answer()
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('contact_creation', None)
            
            await query.edit_message_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=contacts_menu_keyboard()
            )
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return ConversationHandler.END

def register_contacts_handlers(application: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º"""
    contacts_handler = ContactsHandler()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    contacts_conversation = ConversationHandler(
        entry_points=[
            CommandHandler("contacts", contacts_handler.contacts_command),
            MessageHandler(filters.Regex("^üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã$"), contacts_handler.contacts_button_handler),
            CallbackQueryHandler(contacts_handler.contacts_callback_handler)
        ],
        states={
            ADDING_CONTACT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_name_input)
            ],
            ADDING_CONTACT_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_phone_input)
            ],
            ADDING_CONTACT_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_email_input)
            ],
            ADDING_CONTACT_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_address_input)
            ],
            ADDING_CONTACT_WEBSITE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_website_input)
            ],
            ADDING_CONTACT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_description_input)
            ],
            ADDING_CONTACT_CATEGORY: [
                CallbackQueryHandler(contacts_handler.handle_contact_category_selection)
            ],
            SEARCHING_CONTACT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contacts_handler.handle_contact_search_input)
            ],
            CONTACTS_MENU: [
                CallbackQueryHandler(contacts_handler.contacts_callback_handler)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", contacts_handler.cancel_contact_operation),
            CallbackQueryHandler(contacts_handler.handle_contact_cancel, pattern="^contact_cancel$")
        ]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler
    application.add_handler(contacts_conversation)
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å ConversationHandler")
