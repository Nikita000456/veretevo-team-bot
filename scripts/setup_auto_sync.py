#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
–°–æ–∑–¥–∞–µ—Ç cron-–∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
"""
import os
import sys
import subprocess
from pathlib import Path

def check_cron_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å cron"""
    try:
        result = subprocess.run(['which', 'crontab'], capture_output=True, text=True)
        return result.returncode == 0
    except Exception:
        return False

def get_project_path():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É"""
    return Path(__file__).parent.parent.absolute()

def create_cron_jobs():
    """–°–æ–∑–¥–∞–µ—Ç cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    project_path = get_project_path()
    
    # –ü—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
    auto_sync_script = project_path / "scripts" / "auto_sync_departments.py"
    python_path = sys.executable
    
    # –°–æ–∑–¥–∞–µ–º cron-–∑–∞–¥–∞—á–∏
    cron_jobs = [
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ 6:00 —É—Ç—Ä–∞
        f"0 6 * * * cd {project_path} && {python_path} {auto_sync_script} --backup >> logs/cron_sync.log 2>&1",
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (6:00, 10:00, 14:00, 18:00, 22:00)
        f"0 10,14,18,22 * * * cd {project_path} && {python_path} {auto_sync_script} >> logs/cron_sync.log 2>&1",
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        f"0 */2 * * * cd {project_path} && {python_path} {auto_sync_script} --dry-run >> logs/cron_diff.log 2>&1"
    ]
    
    return cron_jobs

def install_cron_jobs():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cron-–∑–∞–¥–∞—á–∏"""
    if not check_cron_available():
        print("‚ùå Cron –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ cron-–∑–∞–¥–∞—á–∏
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        current_cron = result.stdout if result.returncode == 0 else ""
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        new_jobs = create_cron_jobs()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        updated_cron = current_cron + "\n".join([
            "# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª–æ–≤ Veretevo Bot",
            "# –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            ""
        ] + new_jobs + [""])
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        temp_cron_file = "/tmp/veretevo_cron"
        with open(temp_cron_file, 'w') as f:
            f.write(updated_cron)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ cron-–∑–∞–¥–∞—á–∏
        subprocess.run(['crontab', temp_cron_file], check=True)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_cron_file)
        
        print("‚úÖ Cron-–∑–∞–¥–∞—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cron-–∑–∞–¥–∞—á: {e}")
        return False

def remove_cron_jobs():
    """–£–¥–∞–ª—è–µ—Ç cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    if not check_cron_available():
        print("‚ùå Cron –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ cron-–∑–∞–¥–∞—á–∏
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ cron-–∑–∞–¥–∞—á–∏")
            return False
        
        current_cron = result.stdout
        lines = current_cron.split('\n')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Veretevo Bot
        filtered_lines = []
        skip_next = False
        
        for line in lines:
            if "# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª–æ–≤ Veretevo Bot" in line:
                skip_next = True
                continue
            elif skip_next and line.strip() == "":
                skip_next = False
                continue
            elif skip_next:
                continue
            else:
                filtered_lines.append(line)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π cron –±–µ–∑ –∑–∞–¥–∞—á Veretevo Bot
        new_cron = '\n'.join(filtered_lines)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        temp_cron_file = "/tmp/veretevo_cron_clean"
        with open(temp_cron_file, 'w') as f:
            f.write(new_cron)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ cron-–∑–∞–¥–∞—á–∏
        subprocess.run(['crontab', temp_cron_file], check=True)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_cron_file)
        
        print("‚úÖ Cron-–∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è cron-–∑–∞–¥–∞—á: {e}")
        return False

def show_cron_jobs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ cron-–∑–∞–¥–∞—á–∏"""
    if not check_cron_available():
        print("‚ùå Cron –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return False
    
    try:
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        if result.returncode == 0:
            print("üìã –¢–µ–∫—É—â–∏–µ cron-–∑–∞–¥–∞—á–∏:")
            print(result.stdout)
        else:
            print("üìã –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö cron-–∑–∞–¥–∞—á")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è cron-–∑–∞–¥–∞—á: {e}")
        return False

def create_systemd_service():
    """–°–æ–∑–¥–∞–µ—Ç systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    project_path = get_project_path()
    
    service_content = f"""[Unit]
Description=Veretevo Bot Auto Sync Service
After=network.target

[Service]
Type=simple
User={os.getenv('USER', 'ubuntu')}
WorkingDirectory={project_path}
ExecStart={sys.executable} {project_path}/scripts/auto_sync_departments.py --backup
Restart=always
RestartSec=3600

[Install]
WantedBy=multi-user.target
"""
    
    service_file = "/etc/systemd/system/veretevo-auto-sync.service"
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞
        with open(service_file, 'w') as f:
            f.write(service_content)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
        subprocess.run(['sudo', 'systemctl', 'daemon-reload'], check=True)
        
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        subprocess.run(['sudo', 'systemctl', 'enable', 'veretevo-auto-sync.service'], check=True)
        
        print("‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω")
        print(f"üìÅ –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞: {service_file}")
        print("üîß –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("  sudo systemctl start veretevo-auto-sync.service")
        print("  sudo systemctl stop veretevo-auto-sync.service")
        print("  sudo systemctl status veretevo-auto-sync.service")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è systemd —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª–æ–≤")
    parser.add_argument("action", choices=["install", "remove", "show", "systemd"], 
                       help="–î–µ–π—Å—Ç–≤–∏–µ: install (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å), remove (—É–¥–∞–ª–∏—Ç—å), show (–ø–æ–∫–∞–∑–∞—Ç—å), systemd (—Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å)")
    
    args = parser.parse_args()
    
    if args.action == "install":
        print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        success = install_cron_jobs()
        if success:
            print("\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
            print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
            print("  ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ 6:00 (—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π)")
            print("  ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (10:00, 14:00, 18:00, 22:00)")
            print("  ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞")
            print("\nüìã –õ–æ–≥–∏:")
            print("  ‚Ä¢ logs/cron_sync.log - –ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            print("  ‚Ä¢ logs/cron_diff.log - –ª–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–ª–∏—á–∏–π")
    
    elif args.action == "remove":
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        success = remove_cron_jobs()
        if success:
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
    
    elif args.action == "show":
        show_cron_jobs()
    
    elif args.action == "systemd":
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞...")
        create_systemd_service()

if __name__ == "__main__":
    import argparse
    main() 