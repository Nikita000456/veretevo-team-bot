#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª–æ–≤ —Å Telegram-–≥—Ä—É–ø–ø–∞–º–∏.
–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (cron) –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
"""
import sys
import os
import asyncio
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from utils_veretevo.telegram_sync import TelegramGroupSync
from services_veretevo.department_service import load_departments, DEPARTMENTS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/department_sync.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def auto_sync_departments():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤"""
    start_time = datetime.now()
    logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª–æ–≤: {start_time}")
    
    try:
        sync = TelegramGroupSync()
        results = await sync.sync_all_departments()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful = sum(1 for success in results.values() if success)
        total = len(results)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {successful}/{total} –æ—Ç–¥–µ–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
        for department, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"{status} {department}")
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        logger.info(f"‚è±Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        return successful == total
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False

async def sync_with_backup():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    from services_veretevo.department_service import save_departments
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"config_veretevo/departments_config.json.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    try:
        load_departments()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        import json
        with open("config_veretevo/departments_config.json", 'r', encoding='utf-8') as f:
            current_config = json.load(f)
        
        with open(backup_path, 'w', encoding='utf-8') as f:
            json.dump(current_config, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        success = await auto_sync_departments()
        
        if success:
            logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ
            try:
                os.remove(backup_path)
                logger.info("üóëÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞")
            except:
                pass
        else:
            logger.warning("‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —Å –æ—à–∏–±–∫–∞–º–∏, —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª–æ–≤")
    parser.add_argument("--backup", action="store_true", 
                       help="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")
    parser.add_argument("--dry-run", action="store_true",
                       help="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    
    args = parser.parse_args()
    
    if args.dry_run:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–∏—è –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        asyncio.run(show_differences_only())
    elif args.backup:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π
        success = asyncio.run(sync_with_backup())
        sys.exit(0 if success else 1)
    else:
        # –û–±—ã—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        success = asyncio.run(auto_sync_departments())
        sys.exit(0 if success else 1)

async def show_differences_only():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –≤ –æ—Ç–¥–µ–ª–∞—Ö...")
    
    try:
        sync = TelegramGroupSync()
        load_departments()
        
        total_differences = 0
        
        for department_key in DEPARTMENTS.keys():
            if DEPARTMENTS[department_key].get("chat_id"):
                diff = await sync.get_department_diff(department_key)
                
                if "error" not in diff:
                    missing = len(diff["missing_in_config"])
                    extra = len(diff["extra_in_config"])
                    
                    if missing > 0 or extra > 0:
                        total_differences += missing + extra
                        logger.info(f"üìä {department_key}: +{missing} -{extra} —Ä–∞–∑–ª–∏—á–∏–π")
                    else:
                        logger.info(f"‚úÖ {department_key}: –∞–∫—Ç—É–∞–ª—å–Ω–æ")
        
        if total_differences == 0:
            logger.info("üéâ –í—Å–µ –æ—Ç–¥–µ–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
        else:
            logger.info(f"üìã –í—Å–µ–≥–æ —Ä–∞–∑–ª–∏—á–∏–π: {total_differences}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

if __name__ == "__main__":
    main() 