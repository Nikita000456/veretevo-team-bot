#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
"""
import sys
import asyncio
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from utils_veretevo.group_monitor import GroupMonitor
from services_veretevo.department_service import load_departments, DEPARTMENTS

async def test_monitor_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø...")
    
    try:
        monitor = GroupMonitor()
        print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã: {len(monitor.monitored_chats)}")
        
        for chat_id in monitor.monitored_chats:
            department_key = monitor.get_department_by_chat_id(chat_id)
            if department_key:
                department = DEPARTMENTS[department_key]
                print(f"  ‚Ä¢ {department['name']} (ID: {chat_id})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
        return False

async def test_event_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π...")
    
    try:
        monitor = GroupMonitor()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        from telegram import ChatMember, User
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        user = User(id=123456789, first_name="Test User", is_bot=False)
        
        # –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        old_member = ChatMember(user=user, status="left")
        new_member = ChatMember(user=user, status="member")
        event_type = monitor.determine_event_type(old_member, new_member)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {event_type}")
        
        # –¢–µ—Å—Ç 2: –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        old_member = ChatMember(user=user, status="member")
        new_member = ChatMember(user=user, status="left")
        event_type = monitor.determine_event_type(old_member, new_member)
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {event_type}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        old_member = ChatMember(user=user, status="member")
        new_member = ChatMember(user=user, status="administrator")
        event_type = monitor.determine_event_type(old_member, new_member)
        print(f"‚úÖ –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {event_type}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        old_member = ChatMember(user=user, status="administrator")
        new_member = ChatMember(user=user, status="member")
        event_type = monitor.determine_event_type(old_member, new_member)
        print(f"‚úÖ –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {event_type}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
        return False

async def test_department_lookup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–æ–≤ –ø–æ ID —á–∞—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤...")
    
    try:
        monitor = GroupMonitor()
        load_departments()
        
        for department_key, department in DEPARTMENTS.items():
            chat_id = department.get("chat_id")
            if chat_id:
                found_key = monitor.get_department_by_chat_id(chat_id)
                if found_key == department_key:
                    print(f"‚úÖ {department['name']}: {chat_id} -> {found_key}")
                else:
                    print(f"‚ùå {department['name']}: {chat_id} -> {found_key} (–æ–∂–∏–¥–∞–ª–æ—Å—å {department_key})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤: {e}")
        return False

async def test_member_management():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏...")
    
    try:
        monitor = GroupMonitor()
        load_departments()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        test_user_id = 999999999
        test_user_name = "Test User"
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–¥–µ–ª —Å chat_id
        test_department = None
        for key, dept in DEPARTMENTS.items():
            if dept.get("chat_id"):
                test_department = key
                break
        
        if not test_department:
            print("‚ùå –ù–µ—Ç –æ—Ç–¥–µ–ª–æ–≤ —Å chat_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª: {test_department}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        from telegram import User
        test_user = User(id=test_user_id, first_name=test_user_name, is_bot=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        department = DEPARTMENTS[test_department]
        if str(test_user_id) in department["members"]:
            print(f"‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ {test_user_id} —É–∂–µ –µ—Å—Ç—å –≤ –æ—Ç–¥–µ–ª–µ {test_department}")
        else:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            await monitor.handle_member_added(test_department, test_user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω
            load_departments()
            if str(test_user_id) in DEPARTMENTS[test_department]["members"]:
                print(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {test_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª {test_department}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                await monitor.handle_member_removed(test_department, test_user)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω
                load_departments()
                if str(test_user_id) not in DEPARTMENTS[test_department]["members"]:
                    print(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {test_user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç–¥–µ–ª–∞ {test_department}")
                else:
                    print(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {test_user_id} –Ω–µ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç–¥–µ–ª–∞ {test_department}")
            else:
                print(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {test_user_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª {test_department}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø")
    parser.add_argument("--test", choices=["all", "init", "events", "lookup", "members"], 
                       default="all", help="–¢–∏–ø —Ç–µ—Å—Ç–∞")
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø...")
    
    results = []
    
    if args.test in ["all", "init"]:
        results.append(await test_monitor_initialization())
    
    if args.test in ["all", "events"]:
        results.append(await test_event_detection())
    
    if args.test in ["all", "lookup"]:
        results.append(await test_department_lookup())
    
    if args.test in ["all", "members"]:
        results.append(await test_member_management())
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã ({passed}/{total})")
        return 0
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ ({passed}/{total})")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 