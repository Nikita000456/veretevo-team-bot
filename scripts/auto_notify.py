#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±–æ—Ç–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/auto_notify.py [update_type] [title] [description]
"""

import sys
import os
import json
import asyncio
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config_veretevo.env import TELEGRAM_TOKEN
from telegram import Bot
from services_veretevo.notification_service import NotificationService

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

async def send_update_notification(update_type: str, title: str, description: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
    bot = Bot(token=TELEGRAM_TOKEN)
    notification_service = NotificationService(bot)
    
    try:
        if update_type == "update":
            notification_id = await notification_service.send_update_notification(title, description)
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {notification_id})")
        else:
            notification_id = notification_service.create_notification(
                title=title,
                message=description,
                notification_type=update_type
            )
            await notification_service.send_notification_to_all(notification_id)
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {notification_id})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        active_users = notification_service.get_active_users_count()
        recent_users = len(notification_service.get_recent_users(7))
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}")
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {recent_users}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    finally:
        await bot.close()

async def cleanup_inactive_users():
    """–û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    bot = Bot(token=TELEGRAM_TOKEN)
    notification_service = NotificationService(bot)
    
    try:
        removed_count = notification_service.cleanup_inactive_users(30)
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        active_users = notification_service.get_active_users_count()
        print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    finally:
        await bot.close()

async def show_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    bot = Bot(token=TELEGRAM_TOKEN)
    notification_service = NotificationService(bot)
    
    try:
        active_users = notification_service.get_active_users_count()
        recent_users = len(notification_service.get_recent_users(7))
        recent_30 = len(notification_service.get_recent_users(30))
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print(f"   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {recent_users}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {recent_30}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recent_users_data = notification_service.get_recent_users(7)
        if recent_users_data:
            print("\nüë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            for user in recent_users_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                name = user.get('first_name', '') or user.get('username', '') or f"user_{user['user_id']}"
                print(f"   - {name} (ID: {user['user_id']})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        await bot.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scripts/auto_notify.py update <–∑–∞–≥–æ–ª–æ–≤–æ–∫> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
        print("  python scripts/auto_notify.py cleanup")
        print("  python scripts/auto_notify.py stats")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python scripts/auto_notify.py update \"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é\" \"–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\"")
        print("  python scripts/auto_notify.py cleanup")
        print("  python scripts/auto_notify.py stats")
        return
    
    command = sys.argv[1]
    
    if command == "update":
        if len(sys.argv) < 4:
            print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã update –Ω—É–∂–Ω—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
            return
        
        title = sys.argv[2]
        description = " ".join(sys.argv[3:])
        
        print(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏...")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        
        asyncio.run(send_update_notification("update", title, description))
        
    elif command == "cleanup":
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        asyncio.run(cleanup_inactive_users())
        
    elif command == "stats":
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        asyncio.run(show_statistics())
        
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main() 