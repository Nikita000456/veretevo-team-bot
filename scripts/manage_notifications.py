#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∞—Ç—å/–æ—Ç–∫–ª—é—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö.
"""
import os
import sys
import argparse
from pathlib import Path

def get_env_file_path():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É .env"""
    project_root = Path(__file__).parent.parent
    return project_root / ".env"

def read_env_file():
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª .env"""
    env_file = get_env_file_path()
    if not env_file.exists():
        return {}
    
    env_vars = {}
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key] = value
    return env_vars

def write_env_file(env_vars):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª .env"""
    env_file = get_env_file_path()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    env_file.parent.mkdir(exist_ok=True)
    
    with open(env_file, 'w', encoding='utf-8') as f:
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")

def enable_notifications():
    """–í–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    env_vars = read_env_file()
    env_vars['ENABLE_GROUP_NOTIFICATIONS'] = 'true'
    write_env_file(env_vars)
    print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã")
    print("‚ÑπÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")

def disable_notifications():
    """–û—Ç–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    env_vars = read_env_file()
    env_vars['ENABLE_GROUP_NOTIFICATIONS'] = 'false'
    write_env_file(env_vars)
    print("üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    print("‚ÑπÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    env_vars = read_env_file()
    current_setting = env_vars.get('ENABLE_GROUP_NOTIFICATIONS', 'true')
    
    print("üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö:")
    if current_setting.lower() == 'true':
        print("‚úÖ –í–ö–õ–Æ–ß–ï–ù–´")
        print("   –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏:")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print("   ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print("   ‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–∏/–ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    else:
        print("üîá –û–¢–ö–õ–Æ–ß–ï–ù–´")
        print("   –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ")
        print("   –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
    
    print(f"\nüìÅ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: {get_env_file_path()}")

def test_notification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    import asyncio
    from pathlib import Path
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
    project_root = Path(__file__).parent.parent
    sys.path.insert(0, str(project_root))
    
    from utils_veretevo.group_monitor import GroupMonitor
    from services_veretevo.department_service import load_departments, DEPARTMENTS
    
    async def send_test_notification():
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            monitor = GroupMonitor(enable_notifications=True)
            load_departments()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–¥–µ–ª —Å chat_id
            test_department = None
            for key, dept in DEPARTMENTS.items():
                if dept.get("chat_id"):
                    test_department = key
                    break
            
            if not test_department:
                print("‚ùå –ù–µ—Ç –æ—Ç–¥–µ–ª–æ–≤ —Å chat_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            print(f"üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª: {test_department}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await monitor.notify_admins(test_department, "üß™ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    asyncio.run(send_test_notification())

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø")
    parser.add_argument("action", choices=["enable", "disable", "status", "test"], 
                       help="–î–µ–π—Å—Ç–≤–∏–µ: enable (–≤–∫–ª—é—á–∏—Ç—å), disable (–æ—Ç–∫–ª—é—á–∏—Ç—å), status (—Å—Ç–∞—Ç—É—Å), test (—Ç–µ—Å—Ç)")
    
    args = parser.parse_args()
    
    if args.action == "enable":
        enable_notifications()
    elif args.action == "disable":
        disable_notifications()
    elif args.action == "status":
        show_status()
    elif args.action == "test":
        test_notification()

if __name__ == "__main__":
    main() 