#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –ª–æ–º–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
"""

import os
import sys
import logging
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def check_handler_registration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
        with open('main.py', 'r', encoding='utf-8') as f:
            content = f.read()
            compile(content, 'main.py', 'exec')
        print("‚úÖ main.py —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ main.py: {e}")
        return False
    
    return True

def check_gpt_handlers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç GPT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        from handlers_veretevo.gpt_handlers import register_gpt_handlers
        print("‚úÖ GPT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GPT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False
    
    return True

def check_task_handlers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á"""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        with open('handlers_veretevo/tasks.py', 'r', encoding='utf-8') as f:
            content = f.read()
            compile(content, 'handlers_veretevo/tasks.py', 'exec')
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∑–∞–¥–∞—á: {e}")
        return False
    
    return True

def check_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä–≤–∏—Å—ã"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    services = [
        'services_veretevo.task_service',
        'services_veretevo.department_service',
        'services_veretevo.gpt_service'
    ]
    
    for service in services:
        try:
            __import__(service)
            print(f"‚úÖ {service} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {service}: {e}")
            return False
    
    return True

def check_data_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    required_files = [
        'data/tasks.json',
        'data/answers.json',
        'config_veretevo/departments_config.json'
    ]
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ö†Ô∏è {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    return True

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏"""
    print("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
    
    log_file = "logs/bot.log"
    if os.path.exists(log_file):
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                error_lines = [line for line in lines[-50:] if 'ERROR' in line or 'Exception' in line]
                
                if error_lines:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(error_lines)} –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö:")
                    for line in error_lines[-5:]:
                        print(f"   {line.strip()}")
                else:
                    print("‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    print("=" * 50)
    
    checks = [
        check_handler_registration,
        check_gpt_handlers,
        check_task_handlers,
        check_services,
        check_data_files,
        check_logs
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {check.__name__}: {e}")
            results.append(False)
    
    print("=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ({passed}/{total})")
        print("üéâ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        return True
    else:
        print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã ({passed}/{total})")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 