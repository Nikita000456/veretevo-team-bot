#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º –∏ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
"""

import json
import os
import shutil
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def sync_contacts_databases():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        # –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        main_bot_db = "data/suppliers_database.json"
        ai_assistant_db = "../shared/data/suppliers_database.json"
        
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if not os.path.exists(ai_assistant_db):
            logger.error(f"‚ùå –ë–∞–∑–∞ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {ai_assistant_db}")
            return False
        
        if not os.path.exists(main_bot_db):
            logger.info(f"üìÅ –ë–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é: {main_bot_db}")
        
        # –ß–∏—Ç–∞–µ–º –±–∞–∑—É AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        try:
            with open(ai_assistant_db, 'r', encoding='utf-8') as f:
                ai_data = json.load(f)
            logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {len(ai_data)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
            return False
        
        # –ß–∏—Ç–∞–µ–º –±–∞–∑—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        main_data = {}
        if os.path.exists(main_bot_db):
            try:
                with open(main_bot_db, 'r', encoding='utf-8') as f:
                    main_data = json.load(f)
                logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: {len(main_data)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
                main_data = {}
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        merged_data = {}
        updated_count = 0
        new_count = 0
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        for phone, contact in ai_data.items():
            merged_data[phone] = contact.copy()
            if phone not in main_data:
                new_count += 1
            else:
                updated_count += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ
        for phone, contact in main_data.items():
            if phone not in merged_data:
                merged_data[phone] = contact.copy()
                new_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –±–∞–∑—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        try:
            with open(main_bot_db, 'w', encoding='utf-8') as f:
                json.dump(merged_data, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –±–∞–∑–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: {len(merged_data)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: {e}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        backup_path = f"{ai_assistant_db}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        try:
            shutil.copy2(ai_assistant_db, backup_path)
            logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {backup_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        try:
            with open(ai_assistant_db, 'w', encoding='utf-8') as f:
                json.dump(merged_data, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {len(merged_data)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = f"""
üìä –û–¢–ß–ï–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ö–û–ù–¢–ê–ö–¢–û–í
{'='*50}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üì± –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(merged_data)}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {new_count}
üìÅ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: {main_bot_db}
ü§ñ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_assistant_db}
üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}
‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
"""
        
        logger.info(report)
        print(report)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def create_sync_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ bash —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    script_content = '''#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
cd "$(dirname "$0")"
python3 sync_contacts.py
'''
    
    script_path = "sync_contacts.sh"
    try:
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        os.chmod(script_path, 0o755)
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω bash —Å–∫—Ä–∏–ø—Ç: {script_path}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bash —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã
    if sync_contacts_databases():
        # –°–æ–∑–¥–∞–µ–º bash —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        create_sync_script()
        logger.info("üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        exit(1)
