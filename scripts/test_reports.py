#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 scripts/test_reports.py morning  # –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
    python3 scripts/test_reports.py evening  # –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
"""

import sys
import os
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from telegram.ext import ApplicationBuilder
from config_veretevo.env import TELEGRAM_TOKEN
from handlers_veretevo.reports import send_morning_report, send_evening_report
from services_veretevo.department_service import load_departments
from services_veretevo.task_service import load_tasks

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

async def test_report(report_type):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {report_type} –æ—Ç—á–µ—Ç–∞...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    load_departments()
    load_tasks()
    
    # –°–æ–∑–¥–∞–µ–º application
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    try:
        if report_type == "morning":
            print("üåÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞...")
            await send_morning_report(application.bot)
            print("‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        elif report_type == "evening":
            print("üåÜ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞...")
            await send_evening_report(application.bot)
            print("‚úÖ –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'morning' –∏–ª–∏ 'evening'")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        return False
    
    return True

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 scripts/test_reports.py morning  # –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞")
        print("  python3 scripts/test_reports.py evening  # –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞")
        sys.exit(1)
    
    report_type = sys.argv[1].lower()
    
    if report_type not in ["morning", "evening"]:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'morning' –∏–ª–∏ 'evening'")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = asyncio.run(test_report(report_type))
    
    if success:
        print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main() 