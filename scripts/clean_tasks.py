#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ—Ç–º–µ–Ω–µ–Ω–æ" –∏ "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —ç—Ç–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞ tasks.json
"""

import json
import os
import shutil
from datetime import datetime
from pathlib import Path

def backup_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(file_path, backup_path)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    return backup_path

def clean_tasks_file(file_path):
    """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª –æ—Ç –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–æ—Ç–º–µ–Ω–µ–Ω–æ' –∏ '–∑–∞–≤–µ—Ä—à–µ–Ω–æ'"""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_path}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = backup_file(file_path)
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(file_path, 'r', encoding='utf-8') as f:
        tasks = json.load(f)
    
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª–µ: {len(tasks)}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_counts = {}
    for task in tasks:
        status = task.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        status_counts[status] = status_counts.get(status, 0) + 1
    
    print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
    for status, count in status_counts.items():
        print(f"   {status}: {count}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    original_count = len(tasks)
    tasks = [task for task in tasks if task.get('status') not in ['–æ—Ç–º–µ–Ω–µ–Ω–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ']]
    removed_count = original_count - len(tasks)
    
    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {removed_count}")
    print(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á: {len(tasks)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
    
    return removed_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∑–∞–¥–∞—á...")
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    data_dir = Path(__file__).parent.parent / "data"
    tasks_file = data_dir / "tasks.json"
    
    total_removed = 0
    
    # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–¥–∞—á
    if tasks_file.exists():
        removed = clean_tasks_file(tasks_file)
        total_removed += removed
    else:
        print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {tasks_file}")
    
    print(f"\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {total_removed}")
    print("üí° –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏")

if __name__ == "__main__":
    main() 