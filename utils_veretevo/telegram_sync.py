"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–ª–µ–Ω–æ–≤ Telegram-–≥—Ä—É–ø–ø —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –æ—Ç–¥–µ–ª–æ–≤.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
"""
import asyncio
import logging
from typing import Dict, List, Optional, Tuple
from telegram import Bot
from telegram.error import TelegramError, Forbidden, BadRequest
from config_veretevo.env import TELEGRAM_TOKEN
from services_veretevo.department_service import load_departments, save_departments, DEPARTMENTS

logger = logging.getLogger(__name__)

class TelegramGroupSync:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–ª–µ–Ω–æ–≤ Telegram-–≥—Ä—É–ø–ø —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –æ—Ç–¥–µ–ª–æ–≤"""
    
    def __init__(self, token: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ env
        """
        self.token = token or TELEGRAM_TOKEN
        if not self.token:
            raise ValueError("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        self.bot = Bot(token=self.token)
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞"""
        await self.bot.initialize()
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"""
        await self.bot.close()
    
    async def get_chat_members(self, chat_id: int) -> List[Tuple[int, str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞
            
        Returns:
            List[Tuple[int, str]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (user_id, username/first_name)
        """
        try:
            await self.initialize()
            members = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
            try:
                admins = await self.bot.get_chat_administrators(chat_id)
                for member in admins:
                    user = member.user
                    name = user.username or user.first_name or f"User{user.id}"
                    members.append((user.id, name))
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.id} - {name}")
            except TelegramError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
            
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Telegram API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            # –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
            # –û–±—ã—á–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
                
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
            return []
        finally:
            await self.close()
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_members = {}
        for user_id, name in members:
            if user_id not in unique_members:
                unique_members[user_id] = name
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(unique_members)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return list(unique_members.items())
    
    async def sync_department_members(self, department_key: str) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
        
        Args:
            department_key (str): –ö–ª—é—á –æ—Ç–¥–µ–ª–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        load_departments()
        
        if department_key not in DEPARTMENTS:
            logger.error(f"–û—Ç–¥–µ–ª {department_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        department = DEPARTMENTS[department_key]
        chat_id = department.get("chat_id")
        
        if not chat_id:
            logger.warning(f"–î–ª—è –æ—Ç–¥–µ–ª–∞ {department_key} –Ω–µ —É–∫–∞–∑–∞–Ω chat_id")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            real_members = await self.get_chat_members(chat_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            department["members"] = {str(user_id): name for user_id, name in real_members}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            save_departments()
            
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª {department_key}: {len(real_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª–∞ {department_key}: {e}")
            return False
    
    async def sync_all_departments(self) -> Dict[str, bool]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Ç–¥–µ–ª—ã —Å chat_id
        
        Returns:
            Dict[str, bool]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª–∞
        """
        load_departments()
        results = {}
        
        for department_key, department in DEPARTMENTS.items():
            if department.get("chat_id"):
                results[department_key] = await self.sync_department_members(department_key)
            else:
                logger.info(f"–û—Ç–¥–µ–ª {department_key} –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç chat_id)")
                results[department_key] = False
        
        return results
    
    async def get_department_diff(self, department_key: str) -> Dict[str, List]:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã
        
        Args:
            department_key (str): –ö–ª—é—á –æ—Ç–¥–µ–ª–∞
            
        Returns:
            Dict[str, List]: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–ª–∏—á–∏—è–º–∏
        """
        load_departments()
        
        if department_key not in DEPARTMENTS:
            return {"error": ["–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"]}
        
        department = DEPARTMENTS[department_key]
        chat_id = department.get("chat_id")
        
        if not chat_id:
            return {"error": ["–ù–µ—Ç chat_id –¥–ª—è –æ—Ç–¥–µ–ª–∞"]}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        real_members = await self.get_chat_members(chat_id)
        real_member_ids = {str(user_id) for user_id, _ in real_members}
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_members = set(department.get("members", {}).keys())
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è
        missing_in_config = real_member_ids - config_members
        extra_in_config = config_members - real_member_ids
        
        return {
            "missing_in_config": list(missing_in_config),
            "extra_in_config": list(extra_in_config),
            "real_members": real_members,
            "config_members": list(config_members)
        }

async def main_sync():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        sync = TelegramGroupSync()
        results = await sync.sync_all_departments()
        
        print("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        for department, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            print(f"{status} {department}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main_sync()) 