import logging
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from config_veretevo.constants import GENERAL_DIRECTOR_ID
from typing import Any, Dict, Optional

def main_menu_keyboard(chat_type: str = "private", user_id: Optional[int] = None) -> ReplyKeyboardMarkup | None:
    logging.debug(f"main_menu_keyboard –≤—ã–∑–≤–∞–Ω –¥–ª—è chat_type={chat_type}, user_id={user_id}")
    if chat_type != "private":
        return None
    buttons = [["üìå –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"], ["–ú–æ–∏ –∑–∞–¥–∞—á–∏"]]
    # –ö–Ω–æ–ø–∫–∞ '–ü–æ–º–æ—â—å' –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def get_task_action_keyboard(task: Dict[str, Any], user_id: Optional[int], department_members: Optional[list] = None) -> InlineKeyboardMarkup | None:
    from config_veretevo.constants import GENERAL_DIRECTOR_ID
    status = task.get('status')
    author_id = task.get('author_id')
    assistant_id = task.get('assistant_id')
    buttons = []
    
    logging.info(f"üéØ get_task_action_keyboard: status={status}, user_id={user_id}, author_id={author_id}, assistant_id={assistant_id}")
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞, –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–æ–±—â–µ
    if status in ['–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '–æ—Ç–º–µ–Ω–µ–Ω–æ']:
        logging.info(f"üéØ –ó–∞–¥–∞—á–∞ {status}, –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º")
        return None
    
    # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–≥—Ä—É–ø–ø–∞) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á–∏
    if user_id is None:
        if status == '–Ω–æ–≤–∞—è':
            buttons.append(InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{task.get('id','')}") )
        # –ö–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
        if status in ['–Ω–æ–≤–∞—è', '–≤ —Ä–∞–±–æ—Ç–µ']:
            buttons.append(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_{task.get('id','')}") )
            buttons.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{task.get('id','')}") )
        logging.info(f"üéØ –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, —Å—Ç–∞—Ç—É—Å {status}, –∫–Ω–æ–ø–∫–∏: {[btn.text for btn in buttons]}")
        return InlineKeyboardMarkup([buttons])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_director = user_id == GENERAL_DIRECTOR_ID
    is_author = user_id == author_id
    is_assistant = user_id == assistant_id
    is_department_member = False
    if department_members is not None:
        is_department_member = str(user_id) in department_members
    
    logging.info(f"üéØ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: is_director={is_director}, is_author={is_author}, is_assistant={is_assistant}, is_department_member={is_department_member}")
    
    # "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" ‚Äî –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–æ–≤–∞—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —á–ª–µ–Ω –æ—Ç–¥–µ–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä
    if status == '–Ω–æ–≤–∞—è':
        if is_director or is_department_member:
            buttons.append(InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{task.get('id','')}") )
    
    # "–ó–∞–≤–µ—Ä—à–∏—Ç—å" ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if status in ['–Ω–æ–≤–∞—è', '–≤ —Ä–∞–±–æ—Ç–µ']:
        buttons.append(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_{task.get('id','')}") )
    
    # "–û—Ç–º–µ–Ω–∏—Ç—å" ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    if status in ['–Ω–æ–≤–∞—è', '–≤ —Ä–∞–±–æ—Ç–µ']:
        buttons.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{task.get('id','')}") )
    
    logging.info(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {[btn.text for btn in buttons]}")
    return InlineKeyboardMarkup([buttons])
