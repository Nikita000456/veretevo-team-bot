"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö.
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç–¥–µ–ª–æ–≤.
"""
import asyncio
import logging
from typing import Dict, List, Optional, Set
from telegram import Update, Bot, ChatMemberUpdated, ChatMember
from telegram.ext import Application, ContextTypes
from telegram.error import TelegramError, Forbidden
from config_veretevo.env import TELEGRAM_TOKEN
from services_veretevo.department_service import load_departments, save_departments, DEPARTMENTS
from config_veretevo.constants import DEPARTMENTS_JSON_PATH

logger = logging.getLogger(__name__)

class GroupMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, token: str = None, enable_notifications: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø
        
        Args:
            token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ env
            enable_notifications (bool): –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        """
        self.token = token or TELEGRAM_TOKEN
        if not self.token:
            raise ValueError("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        self.bot = Bot(token=self.token)
        self.monitored_chats: Set[int] = set()
        self.enable_notifications = enable_notifications
        self.load_monitored_chats()
    
    def load_monitored_chats(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª–æ–≤"""
        load_departments()
        for department in DEPARTMENTS.values():
            chat_id = department.get("chat_id")
            if chat_id:
                self.monitored_chats.add(chat_id)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.monitored_chats)} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤")
    
    async def handle_chat_member_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not update.chat_member:
            return
        
        chat_member_update: ChatMemberUpdated = update.chat_member
        chat_id = chat_member_update.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç
        if chat_id not in self.monitored_chats:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª–µ
        department_key = self.get_department_by_chat_id(chat_id)
        if not department_key:
            logger.warning(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª–æ–≤")
            return
        
        old_member = chat_member_update.old_chat_member
        new_member = chat_member_update.new_chat_member
        user = chat_member_update.from_user
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event_type = self.determine_event_type(old_member, new_member)
        
        if event_type == "added":
            await self.handle_member_added(department_key, user)
        elif event_type == "removed":
            await self.handle_member_removed(department_key, user)
        elif event_type == "promoted":
            await self.handle_member_promoted(department_key, user)
        elif event_type == "demoted":
            await self.handle_member_demoted(department_key, user)
    
    def determine_event_type(self, old_member: ChatMember, new_member: ChatMember) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        
        Args:
            old_member (ChatMember): –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            new_member (ChatMember): –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            
        Returns:
            str: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ('added', 'removed', 'promoted', 'demoted', 'none')
        """
        old_status = old_member.status
        new_status = new_member.status
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω
        if old_status == "left" and new_status in ["member", "administrator", "creator"]:
            return "added"
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω
        if old_status in ["member", "administrator", "creator"] and new_status == "left":
            return "removed"
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if old_status == "member" and new_status == "administrator":
            return "promoted"
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–Ω–∏–∂–µ–Ω —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if old_status == "administrator" and new_status == "member":
            return "demoted"
        
        return "none"
    
    def get_department_by_chat_id(self, chat_id: int) -> Optional[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –æ—Ç–¥–µ–ª –ø–æ ID —á–∞—Ç–∞
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞
            
        Returns:
            Optional[str]: –ö–ª—é—á –æ—Ç–¥–µ–ª–∞ –∏–ª–∏ None
        """
        load_departments()
        for key, department in DEPARTMENTS.items():
            if department.get("chat_id") == chat_id:
                return key
        return None
    
    async def handle_member_added(self, department_key: str, user):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        
        Args:
            department_key (str): –ö–ª—é—á –æ—Ç–¥–µ–ª–∞
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            load_departments()
            department = DEPARTMENTS[department_key]
            user_id_str = str(user.id)
            user_name = user.username or user.first_name or f"User{user.id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            department["members"][user_id_str] = user_name
            save_departments()
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {user_name} (ID: {user.id}) –≤ –æ—Ç–¥–µ–ª '{department_key}'")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.enable_notifications:
                await self.notify_admins(department_key, f"üë§ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id} –≤ –æ—Ç–¥–µ–ª {department_key}: {e}")
    
    async def handle_member_removed(self, department_key: str, user):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        
        Args:
            department_key (str): –ö–ª—é—á –æ—Ç–¥–µ–ª–∞
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            load_departments()
            department = DEPARTMENTS[department_key]
            user_id_str = str(user.id)
            
            if user_id_str in department["members"]:
                user_name = department["members"][user_id_str]
                del department["members"][user_id_str]
                save_departments()
                
                logger.info(f"‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {user_name} (ID: {user.id}) –∏–∑ –æ—Ç–¥–µ–ª–∞ '{department_key}'")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                if self.enable_notifications:
                    await self.notify_admins(department_key, f"üë§ –£–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: {user_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id} –∏–∑ –æ—Ç–¥–µ–ª–∞ {department_key}: {e}")
    
    async def handle_member_promoted(self, department_key: str, user):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            department_key (str): –ö–ª—é—á –æ—Ç–¥–µ–ª–∞
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            user_name = user.username or user.first_name or f"User{user.id}"
            logger.info(f"‚≠ê –£—á–∞—Å—Ç–Ω–∏–∫ {user_name} (ID: {user.id}) –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª–µ '{department_key}'")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.enable_notifications:
                await self.notify_admins(department_key, f"‚≠ê {user_name} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id} –≤ –æ—Ç–¥–µ–ª–µ {department_key}: {e}")
    
    async def handle_member_demoted(self, department_key: str, user):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–Ω–∏–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            department_key (str): –ö–ª—é—á –æ—Ç–¥–µ–ª–∞
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            user_name = user.username or user.first_name or f"User{user.id}"
            logger.info(f"üìâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_name} (ID: {user.id}) –ø–æ–Ω–∏–∂–µ–Ω –≤ –æ—Ç–¥–µ–ª–µ '{department_key}'")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.enable_notifications:
                await self.notify_admins(department_key, f"üìâ {user_name} –ø–æ–Ω–∏–∂–µ–Ω —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id} –≤ –æ—Ç–¥–µ–ª–µ {department_key}: {e}")
    
    async def notify_admins(self, department_key: str, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–¥–µ–ª–∞
        
        Args:
            department_key (str): –ö–ª—é—á –æ—Ç–¥–µ–ª–∞
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            load_departments()
            department = DEPARTMENTS[department_key]
            chat_id = department.get("chat_id")
            
            if not chat_id:
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await self.bot.send_message(
                chat_id=chat_id,
                text=f"üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞**\n{message}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª {department_key}: {e}")
    
    async def start_monitoring(self, application: Application):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø
        
        Args:
            application (Application): –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
        """
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        application.add_handler(
            ChatMemberHandler(self.handle_chat_member_update)
        )
        
        logger.info("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø –∑–∞–ø—É—â–µ–Ω")
        
        # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ - –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–≤—è–∑—á–∏–≤—ã–º
        # await self.notify_all_departments("üü¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    
    async def notify_all_departments(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Å–µ –æ—Ç–¥–µ–ª—ã
        
        Args:
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        load_departments()
        for department_key, department in DEPARTMENTS.items():
            chat_id = department.get("chat_id")
            if chat_id:
                try:
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text=f"üì¢ **–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n{message}",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª {department_key}: {e}")

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
from telegram.ext import ChatMemberHandler 