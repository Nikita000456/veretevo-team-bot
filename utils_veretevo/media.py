import logging
from telegram import InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Any, Dict, Optional
from utils_veretevo.formatting import format_task_message
from config_veretevo.env import ASSISTANTS_CHAT_ID, FINANCE_CHAT_ID
from services_veretevo.department_service import DEPARTMENTS
from utils_veretevo.keyboards import get_task_action_keyboard
from utils_veretevo.todoist_service import add_comment

async def send_task_with_media(context: ContextTypes.DEFAULT_TYPE, chat_id: int, task: Dict[str, Any], reply_markup: Optional[InlineKeyboardMarkup] = None):
    logging.debug(f"send_task_with_media: task_id={task.get('id')}, chat_id={chat_id}")
    media_list = task.get("media")
    text = task.get("text", "")
    assistant = task.get('assistant_name', '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
    author = task.get('author_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    status = task.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').capitalize()
    try:
        created = task.get('created_at', '')
    except Exception:
        created = task.get('created_at', '')
    info = format_task_message(task)
    if media_list:
        try:
            from telegram import InputMediaPhoto, InputMediaVideo, InputMediaAudio, InputMediaDocument
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–ª—å–±–æ–º
            if isinstance(media_list, list) and len(media_list) > 1:
                media_group = []
                for idx, m in enumerate(media_list):
                    if m["type"] == "photo":
                        media_group.append(InputMediaPhoto(media=m["file_id"], caption=info if idx == 0 else None, parse_mode="HTML" if idx == 0 else None))
                    elif m["type"] == "video":
                        media_group.append(InputMediaVideo(media=m["file_id"], caption=info if idx == 0 else None, parse_mode="HTML" if idx == 0 else None))
                    elif m["type"] == "audio":
                        media_group.append(InputMediaAudio(media=m["file_id"], caption=info if idx == 0 else None, parse_mode="HTML" if idx == 0 else None))
                    elif m["type"] == "document":
                        media_group.append(InputMediaDocument(media=m["file_id"], caption=info if idx == 0 else None, parse_mode="HTML" if idx == 0 else None))
                msgs = await context.bot.send_media_group(chat_id, media_group)
                # –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ (reply_markup) –ø–æ—Å–ª–µ –∞–ª—å–±–æ–º–∞
                if reply_markup:
                    await context.bot.send_message(chat_id, "‚¨ÜÔ∏è –ö –∑–∞–¥–∞—á–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–∞–π–ª—ã. –î–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
                return msgs[0] if msgs else None
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            media = media_list[0] if isinstance(media_list, list) else media_list
            if media["type"] == "photo":
                return await context.bot.send_photo(chat_id, media["file_id"], caption=info, reply_markup=reply_markup, parse_mode="HTML")
            elif media["type"] == "video":
                return await context.bot.send_video(chat_id, media["file_id"], caption=info, reply_markup=reply_markup, parse_mode="HTML")
            elif media["type"] == "audio":
                return await context.bot.send_audio(chat_id, media["file_id"], caption=info, reply_markup=reply_markup, parse_mode="HTML")
            elif media["type"] == "voice":
                return await context.bot.send_voice(chat_id, media["file_id"], caption=info, reply_markup=reply_markup, parse_mode="HTML")
        except Exception as e:
            logging.debug(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞: {e}")
            # –Ø–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(chat_id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ/–≤–æ–π—Å). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            except Exception as e2:
                logging.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –º–µ–¥–∏–∞: {e2}")
            return await context.bot.send_message(chat_id, info, reply_markup=reply_markup, parse_mode="HTML")
    return await context.bot.send_message(chat_id, info, reply_markup=reply_markup, parse_mode="HTML")

async def update_task_messages(context: ContextTypes.DEFAULT_TYPE, task_id: int, new_status: str):
    from services_veretevo.task_service import get_task_by_id
    task = get_task_by_id(task_id)
    if not task:
        return
    logging.debug(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}, —Å—Ç–∞—Ç—É—Å: {new_status}")
    messages_to_update = []
    if "group_messages" in task:
        messages_to_update.extend(task["group_messages"])
    if "private_messages" in task:
        messages_to_update.extend(task["private_messages"])
    if task.get("assistant_message_id"):
        messages_to_update.append({
            "chat_id": ASSISTANTS_CHAT_ID,
            "message_id": task["assistant_message_id"]
        })
    if task.get("department_message_id"):
        for dep_key, dep in DEPARTMENTS.items():
            if dep.get("chat_id"):
                messages_to_update.append({
                    "chat_id": dep["chat_id"],
                    "message_id": task["department_message_id"]
                })
                break
    for msg_info in messages_to_update:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫: –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π None, –¥–ª—è –ª–∏—á–Ω—ã—Ö ‚Äî id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = None
            if "chat_id" in msg_info and str(msg_info["chat_id"]).startswith("-100"):  # supergroup/group
                user_id = None
            elif "chat_id" in msg_info:
                user_id = task.get("assistant_id")  # –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            keyboard = get_task_action_keyboard(task, user_id)
            if task.get('media') and isinstance(task['media'], list) and len(task['media']) > 1:
                # –ê–ª—å–±–æ–º: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ caption –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    await context.bot.edit_message_caption(
                        chat_id=msg_info["chat_id"],
                        message_id=msg_info["message_id"],
                        caption=format_task_message(task),
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è caption –∞–ª—å–±–æ–º–∞: {e}")
            elif task.get('media') and (isinstance(task['media'], list) or isinstance(task['media'], dict)) and (task['media'][0]['type'] in ['photo', 'video', 'audio', 'voice'] if isinstance(task['media'], list) else task['media']['type'] in ['photo', 'video', 'audio', 'voice']):
                await context.bot.edit_message_caption(
                    chat_id=msg_info["chat_id"],
                    message_id=msg_info["message_id"],
                    caption=format_task_message(task),
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                await context.bot.edit_message_text(
                    chat_id=msg_info["chat_id"],
                    message_id=msg_info["message_id"],
                    text=format_task_message(task),
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {msg_info['chat_id']}: {e}")

async def send_task_action_comment(context: ContextTypes.DEFAULT_TYPE, task: dict, action: str, user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É/–æ—Ç–¥–µ–ª –æ –¥–µ–π—Å—Ç–≤–∏–∏ —Å –∑–∞–¥–∞—á–µ–π.
    action: 'take', 'finish', 'cancel'
    """
    from config_veretevo.env import ASSISTANTS_CHAT_ID
    from services_veretevo.department_service import DEPARTMENTS
    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±: –≤—Å–µ–≥–¥–∞ –∏–º—è —Ç–æ–≥–æ, –∫—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
    def get_user_name(user_id):
        for dep in DEPARTMENTS.values():
            if str(user_id) in dep.get("members", {}):
                return dep["members"][str(user_id)]
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_name = get_user_name(user_id)
    task_title = task.get('text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    dep_key = task.get('department')
    dep_chat_id = None
    if dep_key and dep_key in DEPARTMENTS:
        dep_chat_id = DEPARTMENTS[dep_key].get('chat_id')
    if not dep_chat_id:
        dep_chat_id = ASSISTANTS_CHAT_ID
    if action == 'take':
        msg = f"üü° {user_name} –≤–∑—è–ª(–∞) –∑–∞–¥–∞—á—É ¬´{task_title}¬ª –≤ —Ä–∞–±–æ—Ç—É"
    elif action == 'finish':
        msg = f"‚úÖ {user_name} –∑–∞–≤–µ—Ä—à–∏–ª(–∞) –∑–∞–¥–∞—á—É ¬´{task_title}¬ª"
    elif action == 'cancel':
        msg = f"‚ùå {user_name} –æ—Ç–º–µ–Ω–∏–ª(–∞) –∑–∞–¥–∞—á—É ¬´{task_title}¬ª"
    else:
        msg = f"‚ÑπÔ∏è {user_name} –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–¥–∞—á–µ–π ¬´{task_title}¬ª"
    try:
        await context.bot.send_message(dep_chat_id, msg)
    except Exception as e:
        import logging
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —á–∞—Ç {dep_chat_id}: {e}")
    # --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å Todoist ---
    if task.get("todoist_task_id"):
        try:
            add_comment(task["todoist_task_id"], msg)
        except Exception as e:
            import logging
            logging.error(f"[TODOIST] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ Todoist: {e}")
    # --- –ö–æ–Ω–µ—Ü —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ---
