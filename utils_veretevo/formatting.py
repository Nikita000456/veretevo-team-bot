import datetime
from typing import Dict, Any, List

def format_task_message(task: Dict[str, Any]) -> str:
    text = task.get('text', '')
    assistant = task.get('assistant_name', '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
    author = task.get('author_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    status = task.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').capitalize()
    dep_key = task.get('department')
    try:
        from services_veretevo import department_service
        dep_name = department_service.DEPARTMENTS.get(dep_key, {}).get('name', dep_key or '‚Äî')
    except Exception:
        dep_name = dep_key or '‚Äî'
    try:
        created = datetime.datetime.fromisoformat(task.get('created_at', ''))
        created = created.strftime("%d.%m.%Y %H:%M")
    except Exception:
        created = task.get('created_at', '')
    msg = f"üìù <b>–ó–∞–¥–∞—á–∞:</b> {text or '(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)'}\n"
    msg += f"<b>–û—Ç–¥–µ–ª:</b> {dep_name}\n"
    msg += f"<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {assistant}\n"
    msg += f"<b>–ü–æ—Å—Ç–∞–≤–∏–ª:</b> {author}\n"
    msg += f"<b>–°–æ–∑–¥–∞–Ω–æ:</b> {created}\n\n"
    if status == '–ù–æ–≤–∞—è':
        msg += f"üö© <b>–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê</b>"
    elif status == '–í —Ä–∞–±–æ—Ç–µ':
        msg += f"üõ†Ô∏è <b>–í –†–ê–ë–û–¢–ï</b>"
    elif status == '–ó–∞–≤–µ—Ä—à–µ–Ω–æ':
        msg += f"‚úÖ <b>–ó–ê–í–ï–†–®–ï–ù–û</b>"
    elif status == '–û—Ç–º–µ–Ω–µ–Ω–æ':
        msg += f"‚ùå <b>–û–¢–ú–ï–ù–ï–ù–û</b>"
    else:
        msg += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
    return msg

def build_tasks_report(tasks: List[Dict[str, Any]], title: str = "–û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º") -> str:
    if not tasks:
        return f"{title}\n–ù–µ—Ç –∑–∞–¥–∞—á."
    lines = [f"{title}"]
    for t in tasks:
        lines.append(format_task_message(t))
        lines.append("------")
    return "\n".join(lines)
